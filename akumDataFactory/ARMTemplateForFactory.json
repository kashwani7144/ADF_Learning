{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "akumDataFactory"
		},
		"LS_AZURE_ORACLE_2507_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_AZURE_ORACLE_2507'"
		},
		"LS_Azure_SB_Lkp_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_Azure_SB_Lkp'"
		},
		"LS_Azure_tgt_etl_orcl_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_Azure_tgt_etl_orcl'"
		},
		"LS_LOG_MIGRATION_EVENT_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_LOG_MIGRATION_EVENT'"
		},
		"LS_Run_DDLs_Azure_2507_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_Run_DDLs_Azure_2507'"
		},
		"LS_SB_SCD_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_SB_SCD'"
		},
		"LS_SB_Tgt_SalesLT_M_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_SB_Tgt_SalesLT_M'"
		},
		"LS__SB_ADVW_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS__SB_ADVW'"
		},
		"Par_ETLSANDBOX_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Par_ETLSANDBOX'"
		},
		"LS_AZURE_ORACLE_2507_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "etl-oracle.database.windows.net"
		},
		"LS_AZURE_ORACLE_2507_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "etl-oracle"
		},
		"LS_AZURE_ORACLE_2507_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS_Azure_SB_Lkp_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "svetlsandbox.database.windows.net"
		},
		"LS_Azure_SB_Lkp_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ETLSANDBOX"
		},
		"LS_Azure_SB_Lkp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS_Azure_tgt_etl_orcl_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "svetlsandbox.database.windows.net"
		},
		"LS_Azure_tgt_etl_orcl_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ETLSANDBOX"
		},
		"LS_Azure_tgt_etl_orcl_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS_LOG_MIGRATION_EVENT_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "svetlsandbox.database.windows.net"
		},
		"LS_LOG_MIGRATION_EVENT_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ETLSANDBOX"
		},
		"LS_LOG_MIGRATION_EVENT_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS_Run_DDLs_Azure_2507_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "svetlsandbox.database.windows.net"
		},
		"LS_Run_DDLs_Azure_2507_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "etlsandbox"
		},
		"LS_Run_DDLs_Azure_2507_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS_SB_SCD_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "svetlsandbox.database.windows.net"
		},
		"LS_SB_SCD_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ETLSANDBOX"
		},
		"LS_SB_SCD_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS_SB_Tgt_SalesLT_M_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "etlsandbox.database.windows.net"
		},
		"LS_SB_Tgt_SalesLT_M_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ETLSANDBOX"
		},
		"LS_SB_Tgt_SalesLT_M_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"LS__SB_ADVW_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "svetlsandbox.database.windows.net"
		},
		"LS__SB_ADVW_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "ETLSANDBOX"
		},
		"LS__SB_ADVW_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "akum"
		},
		"Par_ETLSANDBOX_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://akumadlsgen2.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/P_DF_SCD_T2_Inc_Vivid_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD_T2_VIVID_CUSTOMER_SCHEMA",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD_T2_Vivid_Customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VividCustomerRaw": {
										"Src_Schema_Name": "VIVID",
										"Src_Table_Name": "BLOB_CUSTOMER_RAW"
									},
									"DimCustomer": {},
									"DwhDimCustomerInsert": {},
									"DwhDimCustomerUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "f9b5aa35-6478-4062-b84a-15343c423c1c"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-15T04:27:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD_T2_Vivid_Customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DF_SCD_T2_Incremental')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD_T2_VIVID_SCHEMA",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD_T2_Vivid_Scd",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VividCustomerRaw": {
										"Src_Schema_Name": "VIVID",
										"Src_Table_Name": "BLOB_CUSTOMER_RAW"
									},
									"DimCustomer": {},
									"DwhDimCustomerInsert": {},
									"DwhDimCustomerUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-14T03:03:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD_T2_Vivid_Scd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DF_SCD_T2_Incremental_BKP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD_T2_VIVID_SCHEMA",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD_T2_Vivid_Scd",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VividCustomerRaw": {
										"Src_Schema_Name": "VIVID",
										"Src_Table_Name": "BLOB_CUSTOMER_RAW"
									},
									"DimCustomer": {},
									"DwhDimCustomerInsert": {},
									"DwhDimCustomerUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DataFlows"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-14T03:03:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD_T2_Vivid_Scd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DF_SCD_T2_Vivid_Raw_Schemas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetWatermarkValue",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', pipeline().parameters.p_src_table, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Watermark_Tracker",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetPreviousWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetWatermarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PreviousWatermark",
							"value": {
								"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IsFirstRun",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetPreviousWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(variables('PreviousWatermark'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SqlQuery_After_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\r\n  'SELECT * FROM ',\r\n  pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table,\r\n  ' WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \r\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'),\r\n  ''' AS DATETIME2)'\r\n)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SqlQuery_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\n  'SELECT * FROM ',\n pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "TruncStageTable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "IsFirstRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n  'TRUNCATE TABLE [',\n  pipeline().parameters.p_stg_schema, '].[', \n  pipeline().parameters.p_stg_table, '];'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DF_LoadStage_WithHash",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TruncStageTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_LoadStage_WithHash",
								"type": "DataFlowReference",
								"parameters": {
									"df_sqlQuery": {
										"value": "@'SELECT * FROM VIVID.BLOB_CUSTOMER_RAW'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"VivivdRawTable": {
										"Src_Schema_Name": {
											"value": "@pipeline().parameters.p_src_schema",
											"type": "Expression"
										},
										"Src_Table_Name": {
											"value": "@pipeline().parameters.p_src_table",
											"type": "Expression"
										}
									},
									"StgCustomerDetails": {
										"Stg_Schema_Name": {
											"value": "@pipeline().parameters.p_stg_schema",
											"type": "Expression"
										},
										"Stg_Table_Name": {
											"value": "@pipeline().parameters.p_stg_table",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SQL_MERGE_SCD2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DF_LoadStage_WithHash",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DECLARE @today_ist datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @chg TABLE(action nvarchar(10));\r\n\r\nBEGIN TRAN;\r\n\r\n-- 1) Expire rows where attributes changed\r\nMERGE DWH.DIM_CUSTOMER_DETAILS AS T\r\nUSING (\r\n  SELECT *\r\n  FROM DWH.STG_CUSTOMER_DETAILS\r\n) AS S\r\nON  T.INDEX_NUM   = S.INDEX_NUM\r\nAND T.CUSTOMER_ID = S.CUSTOMER_ID\r\nAND T.ROW_EXPIR_DT = '9999-12-31'\r\nWHEN MATCHED AND ISNULL(S.HASH_DIFF,0x) <> ISNULL(T.HASH_DIFF,0x)\r\nTHEN UPDATE SET\r\n  T.ROW_EXPIR_DT = DATEADD(day,-1,CAST(@today_ist AS date)),\r\n  T.LST_UPD_TSTMP_IST = @today_ist\r\nOUTPUT $action INTO @chg;\r\n\r\n-- 2) Insert new versions for the rows just expired\r\nINSERT INTO DWH.DIM_CUSTOMER_DETAILS\r\n(\r\n  INDEX_NUM, CUSTOMER_ID,\r\n  FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY,\r\n  PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE,\r\n  HASH_DIFF, VERSION_NUM\r\n)\r\nSELECT\r\n  S.INDEX_NUM, S.CUSTOMER_ID,\r\n  S.FIRST_NAME, S.LAST_NAME, S.COMPANY, S.CITY, S.COUNTRY,\r\n  S.PHONE_1, S.PHONE_2, S.EMAIL, S.SUBSCRIPTION_DATE, S.WEBSITE,\r\n  S.HASH_DIFF, T.VERSION_NUM + 1\r\nFROM DWH.STG_CUSTOMER_DETAILS S\r\nJOIN DWH.DIM_CUSTOMER_DETAILS T\r\n  ON T.INDEX_NUM = S.INDEX_NUM\r\n AND T.CUSTOMER_ID = S.CUSTOMER_ID\r\nWHERE T.ROW_EXPIR_DT = DATEADD(day,-1,CAST(@today_ist AS date));\r\n\r\n-- 3) Insert brand-new keys\r\nMERGE DWH.DIM_CUSTOMER_DETAILS AS T\r\nUSING (\r\n  SELECT *\r\n  FROM DWH.STG_CUSTOMER_DETAILS\r\n) AS S\r\nON  T.INDEX_NUM   = S.INDEX_NUM\r\nAND T.CUSTOMER_ID = S.CUSTOMER_ID\r\nWHEN NOT MATCHED BY TARGET\r\nTHEN INSERT\r\n(\r\n  INDEX_NUM, CUSTOMER_ID,\r\n  FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY,\r\n  PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE,\r\n  HASH_DIFF, VERSION_NUM\r\n)\r\nVALUES\r\n(\r\n  S.INDEX_NUM, S.CUSTOMER_ID,\r\n  S.FIRST_NAME, S.LAST_NAME, S.COMPANY, S.CITY, S.COUNTRY,\r\n  S.PHONE_1, S.PHONE_2, S.EMAIL, S.SUBSCRIPTION_DATE, S.WEBSITE,\r\n  S.HASH_DIFF, 1\r\n)\r\nOUTPUT $action INTO @chg;\r\n\r\nCOMMIT;\r\n\r\n-- Return counts to ADF\r\nSELECT\r\n  SUM(CASE WHEN action='INSERT' THEN 1 ELSE 0 END) AS RowsInserted,\r\n  SUM(CASE WHEN action='UPDATE' THEN 1 ELSE 0 END) AS RowsExpired\r\nFROM @chg;\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsInsertedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MERGE_SCD2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsInserted",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsInserted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRowsExpiredCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetRowsInsertedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsExpired",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsExpired)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SourceKeys_Full",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRowsExpiredCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n 'SELECT ',\n '''DWH'' AS DIM_TAB_SCHEMA_NAME, ',\n '''DIM_CUSTOMER_DETAILS'' AS DIM_TABLE_NAME, ',\n '''CUSTOMER_ID'' AS BUSSINESS_ID_COL_NM, ',\n 'INDEX_NUM, ',\n 'CUSTOMER_ID AS BUSSINESS_ID ',\n 'FROM ',\n pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE DWH.SRC_KEYS_CUSTOMER;",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DWH_DIM_SRC_KEYS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SQL_MarkDeletes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SourceKeys_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS__SB_ADVW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DECLARE @today_ist datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\n\r\n;WITH missing AS (\r\n  SELECT D.INDEX_NUM, D.CUSTOMER_ID\r\n  FROM DWH.DIM_CUSTOMER_DETAILS D\r\n  WHERE D.ROW_EXPIR_DT = '9999-12-31'\r\n  EXCEPT\r\n  SELECT K.INDEX_NUM, K.CUSTOMER_ID\r\n  FROM DWH.SRC_KEYS_CUSTOMER K\r\n)\r\nUPDATE D\r\n   SET D.ROW_EXPIR_DT = DATEADD(day,-1,CAST(@today_ist AS date)),\r\n       D.ROW_STS_CD   = 'D',\r\n       D.LST_UPD_TSTMP_IST = @today_ist\r\nFROM DWH.DIM_CUSTOMER_DETAILS D\r\nJOIN missing M\r\n  ON D.INDEX_NUM = M.INDEX_NUM\r\n AND D.CUSTOMER_ID = M.CUSTOMER_ID\r\nWHERE D.ROW_EXPIR_DT = '9999-12-31';\r\n\r\nSELECT @@ROWCOUNT AS RowsDeleted;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsDeletedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MarkDeletes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsDeleted",
							"value": {
								"value": "@int(activity('SQL_MarkDeletes').output.resultSets[0].rows[0].RowsDeleted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMaxModifiedDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRowsDeletedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT MAX(SRC_ROW_INSRT_TSTMP) AS MAX_MODIFIED_DATE FROM ',\n  pipeline().parameters.p_stg_schema, '.', pipeline().parameters.p_stg_table,\n  ' WHERE SRC_ROW_INSRT_TSTMP > ''', variables('PreviousWatermark'), ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Get_Watermark_2308",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SP_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetMaxWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[UpdateWatermark]",
							"storedProcedureParameters": {
								"FILE_TABLE_ID": {
									"value": {
										"value": "@pipeline().parameters.p_file_table_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SOURCE_TABLE_NAME": {
									"value": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									},
									"type": "String"
								},
								"UPDATED_AT_TSTMP": {
									"value": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"UPDATED_BY": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"WATERMARK_VALUE": {
									"value": {
										"value": "@convertFromUtc(formatDateTime(variables('MaxWatermark'), 'yyyy-MM-ddTHH:mm:ssZ'), 'India Standard Time')\n\n",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_LOG_MIGRATION_EVENT",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetMaxWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetMaxModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxWatermark",
							"value": {
								"value": "@if(\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss.fffffff'),\n  formatDateTime(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema": {
						"type": "string",
						"defaultValue": "VIVID"
					},
					"p_src_table": {
						"type": "string",
						"defaultValue": "BLOB_CUSTOMER_RAW"
					},
					"p_stg_schema": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_stg_table": {
						"type": "string",
						"defaultValue": "STG_CUSTOMER_DETAILS"
					},
					"p_dim_schema": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_dim_table": {
						"type": "string",
						"defaultValue": "DIM_CUSTOMER_DETAILS"
					},
					"p_file_table_id": {
						"type": "int",
						"defaultValue": 1001
					}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"RowsInserted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsExpired": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsDeleted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"SqlQuery": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SCDs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]",
				"[concat(variables('factoryId'), '/dataflows/DF_LoadStage_WithHash')]",
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_RAW_TABLES')]",
				"[concat(variables('factoryId'), '/datasets/DS_DWH_DIM_SRC_KEYS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]",
				"[concat(variables('factoryId'), '/datasets/DS_Get_Watermark_2308')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_Incremental_Migrate_ADVW_Azure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It migrates the Oracle HR schema tables to an Azure SQL database with incremental runs.",
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetSrcTgtTableMapping",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT FILE_TABLE_ID, ',\n  'RIGHT(SRC_SCHEMA_NAME, 7) AS SRC_SCHEMA_NAME, ',\n  'RIGHT(TGT_SCHEMA_NAME, 9) AS TGT_SCHEMA_NAME, ',\n  'SRC_NAME AS SRC_TBL_NAME, ',\n  'TGT_NAME AS TGT_TBL_NAME ',\n  'FROM FILE_TABLE_MAPPING ',\n  'WHERE PIPLN_NM = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_Sandbox_LKP_2507",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSrcTgtTableMapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSrcTgtTableMapping').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetWatermarkValue",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n  'SELECT WATERMARK_VALUE FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', item().SRC_TBL_NAME, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Watermark_Tracker",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SetPreviousWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermarkValue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PreviousWatermark",
										"value": {
											"value": "@activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IsFirstRun",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetPreviousWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(variables('PreviousWatermark'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SqlQuery_After_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\n  'SELECT * FROM ', item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\n  ' WHERE ModifiedDate > CAST(''', \n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'), \n  ''' AS DATETIME2)'\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SqlQuery_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\r\n  'SELECT * FROM ',\r\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME\r\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Migrate_ADVW_Azure",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "IsFirstRun",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "FILE_TABLE_ID",
													"value": {
														"value": "@item().FILE_TABLE_ID",
														"type": "Expression"
													}
												},
												{
													"name": "BATCH_ID",
													"value": "2001"
												},
												{
													"name": "SRC_TBL_NAME",
													"value": {
														"value": "@item().SRC_TBL_NAME",
														"type": "Expression"
													}
												},
												{
													"name": "PIPLN_NM",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@variables('SqlQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										},
										"enableSkipMapping": true
									},
									"inputs": [
										{
											"referenceName": "DS_ADVW_Src_2807",
											"type": "DatasetReference",
											"parameters": {
												"SRC_ADVW_SCHEMA_NAME": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"SRC_ADVW_TABLE_NAME": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SB_Tgt_SalesLT_M",
											"type": "DatasetReference",
											"parameters": {
												"Tgt_Schema_name": {
													"value": "@item().TGT_SCHEMA_NAME",
													"type": "Expression"
												},
												"Tgt_Table_Name": {
													"value": "@item().TGT_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetMaxModifiedDate",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Migrate_ADVW_Azure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\r\n  'SELECT MAX(MODIFIEDDATE) AS MAX_MODIFIED_DATE FROM ',\r\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\r\n  ' WHERE MODIFIEDDATE > ''', variables('PreviousWatermark'), ''''\r\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ADVW_Src_2807",
											"type": "DatasetReference",
											"parameters": {
												"SRC_ADVW_SCHEMA_NAME": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"SRC_ADVW_TABLE_NAME": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "SP_Success_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Migrate_ADVW_Azure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": null,
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().FILE_TABLE_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('Migrate_ADVW_Azure').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Success",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": {
													"value": "@item().TGT_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"tgt_table_name": {
												"value": {
													"value": "@item().TGT_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_Failure_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Migrate_ADVW_Azure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": {
													"value": "@activity('Migrate_ADVW_Azure').error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().FILE_TABLE_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('Migrate_ADVW_Azure').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Fail",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": null,
												"type": "String"
											},
											"tgt_table_name": {
												"value": null,
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SetMaxWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[UpdateWatermark]",
										"storedProcedureParameters": {
											"FILE_TABLE_ID": {
												"value": {
													"value": "@item().FILE_TABLE_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SOURCE_TABLE_NAME": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"UPDATED_AT": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"UPDATED_BY": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"WATERMARK_VALUE": {
												"value": {
													"value": "@variables('MaxWatermark2')",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetMaxWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetMaxModifiedDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxWatermark2",
										"value": {
											"value": "@if(\r\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\r\n  variables('PreviousWatermark'),\r\n  activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"SqlQuery": {
						"type": "String"
					},
					"SqlQuery2": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					},
					"MaxWatermark2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Migrations"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-14T03:03:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Azure_Sandbox_LKP_2507')]",
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADVW_Src_2807')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_Tgt_SalesLT_M')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_Incremental_Migrate_ADVW_Azure_BKP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It migrates the Oracle HR schema tables to an Azure SQL database with incremental runs.",
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetSrcTgtTableMapping",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT FILE_TABLE_ID, ',\n  'RIGHT(SRC_SCHEMA_NAME, 7) AS SRC_SCHEMA_NAME, ',\n  'RIGHT(TGT_SCHEMA_NAME, 9) AS TGT_SCHEMA_NAME, ',\n  'SRC_NAME AS SRC_TBL_NAME, ',\n  'TGT_NAME AS TGT_TBL_NAME ',\n  'FROM FILE_TABLE_MAPPING ',\n  'WHERE PIPLN_NM = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_Sandbox_LKP_2507",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSrcTgtTableMapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSrcTgtTableMapping').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetWatermarkValue",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n  'SELECT WATERMARK_VALUE FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', item().SRC_TBL_NAME, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Watermark_Tracker",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SetPreviousWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermarkValue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PreviousWatermark",
										"value": {
											"value": "@activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IsFirstRun",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetPreviousWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(variables('PreviousWatermark'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SqlQuery_After_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\n  'SELECT * FROM ', item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\n  ' WHERE ModifiedDate > CAST(''', \n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'), \n  ''' AS DATETIME2)'\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SqlQuery_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\r\n  'SELECT * FROM ',\r\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME\r\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Migrate_ADVW_Azure",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "IsFirstRun",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "FILE_TABLE_ID",
													"value": {
														"value": "@item().FILE_TABLE_ID",
														"type": "Expression"
													}
												},
												{
													"name": "BATCH_ID",
													"value": "2001"
												},
												{
													"name": "SRC_TBL_NAME",
													"value": {
														"value": "@item().SRC_TBL_NAME",
														"type": "Expression"
													}
												},
												{
													"name": "PIPLN_NM",
													"value": {
														"value": "@pipeline().Pipeline",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@variables('SqlQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										},
										"enableSkipMapping": true
									},
									"inputs": [
										{
											"referenceName": "DS_ADVW_Src_2807",
											"type": "DatasetReference",
											"parameters": {
												"SRC_ADVW_SCHEMA_NAME": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"SRC_ADVW_TABLE_NAME": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SB_Tgt_SalesLT_M",
											"type": "DatasetReference",
											"parameters": {
												"Tgt_Schema_name": {
													"value": "@item().TGT_SCHEMA_NAME",
													"type": "Expression"
												},
												"Tgt_Table_Name": {
													"value": "@item().TGT_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetMaxModifiedDate",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Migrate_ADVW_Azure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\r\n  'SELECT MAX(MODIFIEDDATE) AS MAX_MODIFIED_DATE FROM ',\r\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\r\n  ' WHERE MODIFIEDDATE > ''', variables('PreviousWatermark'), ''''\r\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ADVW_Src_2807",
											"type": "DatasetReference",
											"parameters": {
												"SRC_ADVW_SCHEMA_NAME": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"SRC_ADVW_TABLE_NAME": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "SP_Success_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Migrate_ADVW_Azure",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": null,
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().FILE_TABLE_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('Migrate_ADVW_Azure').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Success",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": {
													"value": "@item().TGT_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"tgt_table_name": {
												"value": {
													"value": "@item().TGT_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_Failure_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Migrate_ADVW_Azure",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": {
													"value": "@activity('Migrate_ADVW_Azure').error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().FILE_TABLE_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('Migrate_ADVW_Azure').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Fail",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": null,
												"type": "String"
											},
											"tgt_table_name": {
												"value": null,
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SetMaxWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[UpdateWatermark]",
										"storedProcedureParameters": {
											"FILE_TABLE_ID": {
												"value": {
													"value": "@item().FILE_TABLE_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SOURCE_TABLE_NAME": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"UPDATED_AT": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"UPDATED_BY": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"WATERMARK_VALUE": {
												"value": {
													"value": "@variables('MaxWatermark2')",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetMaxWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetMaxModifiedDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxWatermark2",
										"value": {
											"value": "@if(\r\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\r\n  variables('PreviousWatermark'),\r\n  activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"SqlQuery": {
						"type": "String"
					},
					"SqlQuery2": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					},
					"MaxWatermark2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Migrations"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-17T02:31:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Azure_Sandbox_LKP_2507')]",
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADVW_Src_2807')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_Tgt_SalesLT_M')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_SCD_T2_Inc_Vivid_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetSrcDimTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\r\n  'SELECT SSDTM_ID, ',\r\n  'SRC_SCHEMA_NAME, ',\r\n  'SRC_TBL_NAME, ',\r\n  'STG_SCHEMA_NAME, ',\r\n  'STG_TBL_NAME, ',\r\n  'DIM_SCHEMA_NAME, ',\r\n  'DIM_TBL_NAME ',\r\n  'FROM DBO.SRC_STG_DIM_TABLE_MAPPING ',\r\n  'WHERE PIPLN_NM = ''', pipeline().Pipeline, ''' ',\r\n  'AND ROW_STS_CD = ''A'' ',\r\n  'AND SRC_TBL_NAME = ''BLOB_CUSTOMER_RAW'''\r\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SRC_DIM_LKP_1807",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSrcDimTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSrcDimTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetWatermarkValue",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', item().SRC_TBL_NAME, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Watermark_Tracker",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SetPreviousWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermarkValue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PreviousWatermark",
										"value": {
											"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IsFirstRun",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetPreviousWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(variables('PreviousWatermark'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SqlQuery_After_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\n  'SELECT * FROM ', item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\n  ' WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'), \n  ''' AS DATETIME2)'\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SqlQuery_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\n  'SELECT * FROM ',\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "CopySrcToStg",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TruncStageTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@variables('SqlQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SB_Vivid_1808",
											"type": "DatasetReference",
											"parameters": {
												"Src_Schema_Name": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"Src_Table_Name": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SB_TGT_DWH_1808",
											"type": "DatasetReference",
											"parameters": {
												"Stg_Schema_Name": {
													"value": "@item().STG_SCHEMA_NAME",
													"type": "Expression"
												},
												"Stg_Table_Name": {
													"value": "@item().STG_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compute_HashDiff",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopySrcToStg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[util].[Compute_HashDiff]",
										"storedProcedureParameters": {
											"excludeCols": {
												"value": "",
												"type": "String"
											},
											"hashcol": {
												"value": "HASHDIFF",
												"type": "String"
											},
											"schema": {
												"value": {
													"value": "@item().STG_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"table": {
												"value": {
													"value": "@item().STG_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Azure_SB_Lkp",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "TruncStageTable",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "IsFirstRun",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LS_Azure_SB_Lkp",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat(\n  'TRUNCATE TABLE [',\n  item().STG_SCHEMA_NAME, '].[', \n  item().STG_TBL_NAME, '];'\n)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "DimCustomer",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Compute_HashDiff",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "WATERMARK_ID",
													"value": {
														"value": "@activity('GetWatermarkValue').output.firstRow.WATERMARK_ID",
														"type": "Expression"
													}
												},
												{
													"name": "BATCH_ID",
													"value": "1001"
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Tgt_DWH_StgCustomer",
											"type": "DatasetReference",
											"parameters": {
												"Stg_Schema_Name": {
													"value": "@item().STG_SCHEMA_NAME",
													"type": "Expression"
												},
												"Stg_Table_Name": {
													"value": "@item().STG_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Tgt_DWH_DimCustomer",
											"type": "DatasetReference",
											"parameters": {
												"Dim_Schema_Name": {
													"value": "@item().DIM_SCHEMA_NAME",
													"type": "Expression"
												},
												"Dim_Table_Name": {
													"value": "@item().DIM_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetMaxModifiedDate",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DimCustomer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n  'SELECT MAX(SRC_ROW_INSRT_TSTMP) AS MAX_MODIFIED_DATE FROM ',\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\n  ' WHERE SRC_ROW_INSRT_TSTMP > ''', variables('PreviousWatermark'), ''''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ADVW_Src_2807",
											"type": "DatasetReference",
											"parameters": {
												"SRC_ADVW_SCHEMA_NAME": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"SRC_ADVW_TABLE_NAME": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "SP_Success_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DimCustomer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": null,
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().SSDTM_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('DimCustomer').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Success",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": {
													"value": "@item().DIM_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"tgt_table_name": {
												"value": {
													"value": "@item().DIM_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_Failure_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DimCustomer",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": {
													"value": "@activity('DimCustomer').error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().SSDTM_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('DimCustomer').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Fail",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": null,
												"type": "String"
											},
											"tgt_table_name": {
												"value": null,
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SetMaxWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[UpdateWatermark]",
										"storedProcedureParameters": {
											"FILE_TABLE_ID": {
												"value": {
													"value": "@item().SSDTM_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SOURCE_TABLE_NAME": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"UPDATED_AT_TSTMP": {
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"UPDATED_BY": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"WATERMARK_VALUE": {
												"value": {
													"value": "@convertFromUtc(formatDateTime(variables('MaxWatermark'), 'yyyy-MM-ddTHH:mm:ssZ'), 'India Standard Time')\n\n",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetMaxWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetMaxModifiedDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxWatermark",
										"value": {
											"value": "@if(\r\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\r\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss.fffffff'),\r\n  formatDateTime(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE, 'yyyy-MM-dd HH:mm:ss.fffffff')\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"SqlQuery": {
						"type": "String"
					},
					"SqlQuery2": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SCDs"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-19T06:38:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SRC_DIM_LKP_1807')]",
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_Vivid_1808')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_TGT_DWH_1808')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DWH_StgCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DWH_DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADVW_Src_2807')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_SCD_T2_Inc_Vivid_Customer_BKP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetSrcDimTableList",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\r\n  'SELECT SSDTM_ID, ',\r\n  'SRC_SCHEMA_NAME, ',\r\n  'SRC_TBL_NAME, ',\r\n  'STG_SCHEMA_NAME, ',\r\n  'STG_TBL_NAME, ',\r\n  'DIM_SCHEMA_NAME, ',\r\n  'DIM_TBL_NAME ',\r\n  'FROM DBO.SRC_STG_DIM_TABLE_MAPPING ',\r\n  'WHERE PIPLN_NM = ''', pipeline().Pipeline, ''' ',\r\n  'AND ROW_STS_CD = ''A'' ',\r\n  'AND SRC_TBL_NAME = ''BLOB_CUSTOMER_RAW'''\r\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SRC_DIM_LKP_1807",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSrcDimTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSrcDimTableList').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetWatermarkValue",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', item().SRC_TBL_NAME, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Watermark_Tracker",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SetPreviousWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermarkValue",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PreviousWatermark",
										"value": {
											"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IsFirstRun",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SetPreviousWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(variables('PreviousWatermark'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SqlQuery_After_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\n  'SELECT * FROM ', item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\n  ' WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'), \n  ''' AS DATETIME2)'\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SqlQuery_1_run",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "SqlQuery",
													"value": {
														"value": "@concat(\n  'SELECT * FROM ',\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "CopySrcToStg",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TruncStageTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@variables('SqlQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SB_Vivid_1808",
											"type": "DatasetReference",
											"parameters": {
												"Src_Schema_Name": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"Src_Table_Name": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SB_TGT_DWH_1808",
											"type": "DatasetReference",
											"parameters": {
												"Stg_Schema_Name": {
													"value": "@item().STG_SCHEMA_NAME",
													"type": "Expression"
												},
												"Stg_Table_Name": {
													"value": "@item().STG_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Compute_HashDiff",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopySrcToStg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[util].[Compute_HashDiff]",
										"storedProcedureParameters": {
											"excludeCols": {
												"value": "",
												"type": "String"
											},
											"hashcol": {
												"value": "HASHDIFF",
												"type": "String"
											},
											"schema": {
												"value": {
													"value": "@item().STG_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"table": {
												"value": {
													"value": "@item().STG_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Azure_SB_Lkp",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "TruncStageTable",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "IsFirstRun",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LS_Azure_SB_Lkp",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat(\n  'TRUNCATE TABLE [',\n  item().STG_SCHEMA_NAME, '].[', \n  item().STG_TBL_NAME, '];'\n)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "DimCustomer",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Compute_HashDiff",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "WATERMARK_ID",
													"value": {
														"value": "@activity('GetWatermarkValue').output.firstRow.WATERMARK_ID",
														"type": "Expression"
													}
												},
												{
													"name": "BATCH_ID",
													"value": "1001"
												}
											],
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Tgt_DWH_StgCustomer",
											"type": "DatasetReference",
											"parameters": {
												"Stg_Schema_Name": {
													"value": "@item().STG_SCHEMA_NAME",
													"type": "Expression"
												},
												"Stg_Table_Name": {
													"value": "@item().STG_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Tgt_DWH_DimCustomer",
											"type": "DatasetReference",
											"parameters": {
												"Dim_Schema_Name": {
													"value": "@item().DIM_SCHEMA_NAME",
													"type": "Expression"
												},
												"Dim_Table_Name": {
													"value": "@item().DIM_TBL_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetMaxModifiedDate",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "DimCustomer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n  'SELECT MAX(SRC_ROW_INSRT_TSTMP) AS MAX_MODIFIED_DATE FROM ',\n  item().SRC_SCHEMA_NAME, '.', item().SRC_TBL_NAME,\n  ' WHERE SRC_ROW_INSRT_TSTMP > ''', variables('PreviousWatermark'), ''''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_ADVW_Src_2807",
											"type": "DatasetReference",
											"parameters": {
												"SRC_ADVW_SCHEMA_NAME": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"SRC_ADVW_TABLE_NAME": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "SP_Success_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DimCustomer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": null,
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().SSDTM_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('DimCustomer').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Success",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": {
													"value": "@item().DIM_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"tgt_table_name": {
												"value": {
													"value": "@item().DIM_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_Failure_Log",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "DimCustomer",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[LOG_MIGRATION_EVENT]",
										"storedProcedureParameters": {
											"audit_key": {
												"value": {
													"value": "@formatDateTime(utcNow(), 'yyyyMMddHHmmss')",
													"type": "Expression"
												},
												"type": "String"
											},
											"batch_id": {
												"value": {
													"value": "@int(formatDateTime(utcNow(), 'yyyyMMdd'))",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"end_time": {
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"error_msg": {
												"value": {
													"value": "@activity('DimCustomer').error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"file_table_id": {
												"value": {
													"value": "@item().SSDTM_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipeline_name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"row_count": {
												"value": {
													"value": "@activity('DimCustomer').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"src_schema_name": {
												"value": {
													"value": "@item().SRC_SCHEMA_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"src_table_name": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"start_time": {
												"value": {
													"value": "@variables('StartTime')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "Fail",
												"type": "String"
											},
											"tgt_schema_name": {
												"value": null,
												"type": "String"
											},
											"tgt_table_name": {
												"value": null,
												"type": "String"
											},
											"triggered_by": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SP_UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SetMaxWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[UpdateWatermark]",
										"storedProcedureParameters": {
											"FILE_TABLE_ID": {
												"value": {
													"value": "@item().SSDTM_ID",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SOURCE_TABLE_NAME": {
												"value": {
													"value": "@item().SRC_TBL_NAME",
													"type": "Expression"
												},
												"type": "String"
											},
											"UPDATED_AT_TSTMP": {
												"value": {
													"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"UPDATED_BY": {
												"value": {
													"value": "@pipeline().TriggerName",
													"type": "Expression"
												},
												"type": "String"
											},
											"WATERMARK_VALUE": {
												"value": {
													"value": "@convertFromUtc(formatDateTime(variables('MaxWatermark'), 'yyyy-MM-ddTHH:mm:ssZ'), 'India Standard Time')\n\n",
													"type": "Expression"
												},
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_LOG_MIGRATION_EVENT",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "SetMaxWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetMaxModifiedDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "MaxWatermark",
										"value": {
											"value": "@if(\r\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\r\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss.fffffff'),\r\n  formatDateTime(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE, 'yyyy-MM-dd HH:mm:ss.fffffff')\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"SqlQuery": {
						"type": "String"
					},
					"SqlQuery2": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SCDs"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-23T00:43:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SRC_DIM_LKP_1807')]",
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_Vivid_1808')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_TGT_DWH_1808')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DWH_StgCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DS_Tgt_DWH_DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADVW_Src_2807')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_SCD_T2_Vivid_Raw_Schemas_BKP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetWatermarkValue",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', pipeline().parameters.p_src_table, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Watermark_Tracker",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetPreviousWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetWatermarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PreviousWatermark",
							"value": {
								"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IsFirstRun",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetPreviousWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(variables('PreviousWatermark'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SqlQuery_After_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\r\n  'SELECT ',\r\n  'INDEX_NUM, CUSTOMER_ID, FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY, ',\r\n  'PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, ',\r\n  'SRC_ROW_INSRT_TSTMP, ',\r\n  'HASHBYTES(''SHA2_256'', ',\r\n    'CONCAT_WS(''|'', ',\r\n      'ISNULL(FIRST_NAME, ''''), ',\r\n      'ISNULL(LAST_NAME, ''''), ',\r\n      'ISNULL(COMPANY, ''''), ',\r\n      'ISNULL(CITY, ''''), ',\r\n      'ISNULL(COUNTRY, ''''), ',\r\n      'ISNULL(PHONE_1, ''''), ',\r\n      'ISNULL(PHONE_2, ''''), ',\r\n      'ISNULL(EMAIL, ''''), ',\r\n      'ISNULL(CONVERT(NVARCHAR(30), SUBSCRIPTION_DATE,126), ''''), ',\r\n      'ISNULL(WEBSITE, '''')',\r\n    ')',\r\n  ') AS HASH_DIFF ',\r\n  'FROM ', pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table, ' ',\r\n  'WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \r\n    formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'),\r\n  ''' AS DATETIME2)'\r\n)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SqlQuery_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\r\n  'SELECT ',\r\n  'INDEX_NUM, CUSTOMER_ID, FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY, ',\r\n  'PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, ',\r\n  'SRC_ROW_INSRT_TSTMP, ',\r\n  'HASHBYTES(''SHA2_256'', ',\r\n  'CONCAT_WS(''|'', ',\r\n    'ISNULL(FIRST_NAME,'''') , ',\r\n    'ISNULL(LAST_NAME,'''') , ',\r\n    'ISNULL(COMPANY,'''') , ',\r\n    'ISNULL(CITY,'''') , ',\r\n    'ISNULL(COUNTRY,'''') , ',\r\n    'ISNULL(PHONE_1,'''') , ',\r\n    'ISNULL(PHONE_2,'''') , ',\r\n    'ISNULL(EMAIL,'''') , ',\r\n    'ISNULL(CONVERT(NVARCHAR(30), SUBSCRIPTION_DATE,126),'''') , ',\r\n    'ISNULL(WEBSITE,'''') ',\r\n  ')) AS HASH_DIFF ',\r\n  'FROM ', pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "TruncStageTable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "IsFirstRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n  'TRUNCATE TABLE [',\n  pipeline().parameters.p_stg_schema, '].[', \n  pipeline().parameters.p_stg_table, '];'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SQL_MERGE_SCD2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LoadStage_WithHash",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "p_batch_id",
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.p_batch_id",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "/* ===== Inputs from ADF Script parameters ===== Expect a Script parameter named p_batch_id (Int32, Input) */\r\nDECLARE @BatchId INT = @p_batch_id;\r\n\r\n/* ===== Safer transaction behavior ===== */\r\nSET XACT_ABORT ON;\r\n\r\nDECLARE @today_ist  datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @today_date date         = CAST(@today_ist AS date);\r\n\r\nDECLARE @WatermarkId INT;\r\nSELECT TOP 1 @WatermarkId = WATERMARK_ID\r\nFROM dbo.WATERMARK_TRACKER\r\nWHERE PIPELINE_NAME = 'P_SCD_T2_Inc_Vivid_Customer'\r\n  AND SOURCE_TABLE_NAME = 'BLOB_CUSTOMER_RAW'\r\nORDER BY UPDATED_AT_TSTMP DESC;\r\n\r\nIF @WatermarkId IS NULL SET @WatermarkId = 0;  -- fallback if nothing found\r\n\r\nDECLARE @chg TABLE (action nvarchar(10));\r\n\r\nBEGIN TRY\r\n    BEGIN TRAN;\r\n\r\n    /* 1) Expire current rows whose attributes changed (close them on TODAY) */\r\n    MERGE DWH.DIM_CUSTOMER_DETAILS AS T\r\n    USING (SELECT * FROM DWH.STG_CUSTOMER_DETAILS) AS S\r\n      ON  T.INDEX_NUM    = S.INDEX_NUM\r\n      AND T.CUSTOMER_ID  = S.CUSTOMER_ID\r\n      AND T.ROW_EXPIR_DT = '9999-12-31'\r\n    WHEN MATCHED AND ISNULL(S.HASH_DIFF, 0x) <> ISNULL(T.HASH_DIFF, 0x)\r\n      THEN UPDATE SET\r\n           T.ROW_EXPIR_DT       = @today_date,       -- close on today (not yesterday)\r\n           T.LST_UPD_TSTMP_IST  = @today_ist\r\n      OUTPUT $action INTO @chg;\r\n\r\n    /* 2) Insert new versions for the keys just expired in step 1\r\n          (new rows get ROW_EFF_DT default = today; VERSION_NUM = prev+1) */\r\n    INSERT INTO DWH.DIM_CUSTOMER_DETAILS\r\n    (\r\n      INDEX_NUM, CUSTOMER_ID,\r\n      FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY,\r\n      PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, SRC_ROW_INSRT_TSTMP,\r\n      HASH_DIFF, VERSION_NUM,\r\n      WATERMARK_ID, BATCH_ID\r\n    )\r\n    SELECT\r\n      S.INDEX_NUM, S.CUSTOMER_ID,\r\n      S.FIRST_NAME, S.LAST_NAME, S.COMPANY, S.CITY, S.COUNTRY,\r\n      S.PHONE_1, S.PHONE_2, S.EMAIL, S.SUBSCRIPTION_DATE, S.WEBSITE, S.SRC_ROW_INSRT_TSTMP,\r\n      S.HASH_DIFF, T.VERSION_NUM + 1,\r\n      @WatermarkId, @BatchId\r\n    FROM DWH.STG_CUSTOMER_DETAILS S\r\n    JOIN DWH.DIM_CUSTOMER_DETAILS T\r\n      ON T.INDEX_NUM   = S.INDEX_NUM\r\n     AND T.CUSTOMER_ID = S.CUSTOMER_ID\r\n    WHERE T.ROW_EXPIR_DT = @today_date;   -- rows just closed above\r\n\r\n    /* 3) Insert brand-new keys (first versions) */\r\n    MERGE DWH.DIM_CUSTOMER_DETAILS AS T\r\n    USING (SELECT * FROM DWH.STG_CUSTOMER_DETAILS) AS S\r\n      ON  T.INDEX_NUM   = S.INDEX_NUM\r\n      AND T.CUSTOMER_ID = S.CUSTOMER_ID\r\n    WHEN NOT MATCHED BY TARGET\r\n      THEN INSERT\r\n      (\r\n        INDEX_NUM, CUSTOMER_ID,\r\n        FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY,\r\n        PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, SRC_ROW_INSRT_TSTMP,\r\n        HASH_DIFF, VERSION_NUM,\r\n        WATERMARK_ID, BATCH_ID\r\n      )\r\n      VALUES\r\n      (\r\n        S.INDEX_NUM, S.CUSTOMER_ID,\r\n        S.FIRST_NAME, S.LAST_NAME, S.COMPANY, S.CITY, S.COUNTRY,\r\n        S.PHONE_1, S.PHONE_2, S.EMAIL, S.SUBSCRIPTION_DATE, S.WEBSITE, S.SRC_ROW_INSRT_TSTMP,\r\n        S.HASH_DIFF, 1,\r\n        @WatermarkId, @BatchId\r\n      )\r\n      OUTPUT $action INTO @chg;\r\n\r\n    COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n    IF @@TRANCOUNT > 0 ROLLBACK;\r\n    THROW;\r\nEND CATCH;\r\n\r\n/* ===== Return counts back to ADF ===== */\r\nSELECT\r\n  SUM(CASE WHEN action = 'INSERT' THEN 1 ELSE 0 END) AS RowsInserted,\r\n  SUM(CASE WHEN action = 'UPDATE' THEN 1 ELSE 0 END) AS RowsExpired\r\nFROM @chg;\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsInsertedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MERGE_SCD2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsInserted",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsInserted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRowsExpiredCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetRowsInsertedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsExpired",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsExpired)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SourceKeys_Full",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetRowsExpiredCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n 'SELECT ',\n '''DWH'' AS DIM_TAB_SCHEMA_NAME, ',\n '''DIM_CUSTOMER_DETAILS'' AS DIM_TABLE_NAME, ',\n '''CUSTOMER_ID'' AS BUSSINESS_ID_COL_NM, ',\n 'INDEX_NUM, ',\n 'CUSTOMER_ID AS BUSSINESS_ID ',\n 'FROM ',\n pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE DWH.DIM_SRC_KEYS;",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DWH_DIM_SRC_KEYS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SQL_MarkDeletes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SourceKeys_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS__SB_ADVW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SET XACT_ABORT ON;\r\n\r\nDECLARE @today_ist  datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @today_date date         = CAST(@today_ist AS date);\r\n\r\nBEGIN TRY\r\n  BEGIN TRAN;\r\n\r\n  ;WITH missing AS (\r\n    SELECT D.INDEX_NUM, D.CUSTOMER_ID\r\n    FROM DWH.DIM_CUSTOMER_DETAILS D\r\n    WHERE D.ROW_EXPIR_DT = '9999-12-31'              -- only current rows\r\n  EXCEPT\r\n  SELECT K.INDEX_NUM, K.BUSSINESS_ID\r\n  FROM DWH.DIM_SRC_KEYS K\r\n  WHERE BUSSINESS_ID_COL_NM = 'CUSTOMER_ID'\r\n  )\r\n  UPDATE D\r\n     SET D.ROW_EXPIR_DT       = @today_date,         -- expire today (not yesterday)\r\n         D.ROW_STS_CD         = 'D',\r\n         D.LST_UPD_TSTMP_IST  = @today_ist\r\n  FROM DWH.DIM_CUSTOMER_DETAILS D\r\n  JOIN missing M\r\n    ON D.INDEX_NUM   = M.INDEX_NUM\r\n   AND D.CUSTOMER_ID = M.CUSTOMER_ID\r\n  WHERE D.ROW_EXPIR_DT = '9999-12-31';\r\n\r\n  COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n  IF @@TRANCOUNT > 0 ROLLBACK;\r\n  THROW;\r\nEND CATCH;\r\n\r\n-- Return count to ADF\r\nSELECT @@ROWCOUNT AS RowsDeleted;\r\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsDeletedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MarkDeletes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsDeleted",
							"value": {
								"value": "@int(activity('SQL_MarkDeletes').output.resultSets[0].rows[0].RowsDeleted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMaxModifiedDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRowsDeletedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT MAX(SRC_ROW_INSRT_TSTMP) AS MAX_MODIFIED_DATE FROM ',\n  pipeline().parameters.p_stg_schema, '.', pipeline().parameters.p_stg_table,\n  ' WHERE SRC_ROW_INSRT_TSTMP > ''', variables('PreviousWatermark'), ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Get_Watermark_2308",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SP_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetMaxWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[UpdateWatermark]",
							"storedProcedureParameters": {
								"FILE_TABLE_ID": {
									"value": {
										"value": "@pipeline().parameters.p_file_table_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SOURCE_TABLE_NAME": {
									"value": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									},
									"type": "String"
								},
								"UPDATED_AT_TSTMP": {
									"value": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"UPDATED_BY": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"WATERMARK_VALUE": {
									"value": {
										"value": "@convertFromUtc(formatDateTime(variables('MaxWatermark'), 'yyyy-MM-ddTHH:mm:ssZ'), 'India Standard Time')\n\n",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_LOG_MIGRATION_EVENT",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetMaxWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetMaxModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxWatermark",
							"value": {
								"value": "@if(\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss.fffffff'),\n  formatDateTime(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LoadStage_WithHash",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncStageTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('SqlQuery')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CUSTOMER_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CUSTOMER_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COMPANY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COMPANY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CITY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CITY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COUNTRY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COUNTRY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHONE_1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHONE_1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHONE_2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHONE_2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SUBSCRIPTION_DATE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SUBSCRIPTION_DATE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WEBSITE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WEBSITE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SRC_ROW_INSRT_TSTMP",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "SRC_ROW_INSRT_TSTMP",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "HASH_DIFF"
										},
										"sink": {
											"name": "HASH_DIFF",
											"type": "Byte[]",
											"physicalType": "varbinary"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Vivid_Raw_2408",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_STG_WITH_HASH",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema": {
						"type": "string",
						"defaultValue": "VIVID"
					},
					"p_src_table": {
						"type": "string",
						"defaultValue": "BLOB_CUSTOMER_RAW"
					},
					"p_stg_schema": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_stg_table": {
						"type": "string",
						"defaultValue": "STG_CUSTOMER_DETAILS"
					},
					"p_dim_schema": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_dim_table": {
						"type": "string",
						"defaultValue": "DIM_CUSTOMER_DETAILS"
					},
					"p_file_table_id": {
						"type": "int",
						"defaultValue": 1001
					},
					"p_batch_id": {
						"type": "int",
						"defaultValue": 10001
					}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"RowsInserted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsExpired": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsDeleted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"SqlQuery": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SCDs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]",
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_RAW_TABLES')]",
				"[concat(variables('factoryId'), '/datasets/DS_DWH_DIM_SRC_KEYS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]",
				"[concat(variables('factoryId'), '/datasets/DS_Get_Watermark_2308')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]",
				"[concat(variables('factoryId'), '/datasets/DS_Vivid_Raw_2408')]",
				"[concat(variables('factoryId'), '/datasets/DS_STG_WITH_HASH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_SCD_T2_Vivid_Schema_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetWatermarkValue",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.DIM_WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', pipeline().parameters.p_src_table, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Watermark_Tracker",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetPreviousWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetWatermarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PreviousWatermark",
							"value": {
								"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IsFirstRun",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetPreviousWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(variables('PreviousWatermark'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SqlQuery_After_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\r\n  'SELECT ',\r\n  'INDEX_NUM, CUSTOMER_ID, FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY, ',\r\n  'PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, ',\r\n  'SRC_ROW_INSRT_TSTMP, ',\r\n  'HASHBYTES(''SHA2_256'', ',\r\n    'CONCAT_WS(''|'', ',\r\n      'ISNULL(FIRST_NAME, ''''), ',\r\n      'ISNULL(LAST_NAME, ''''), ',\r\n      'ISNULL(COMPANY, ''''), ',\r\n      'ISNULL(CITY, ''''), ',\r\n      'ISNULL(COUNTRY, ''''), ',\r\n      'ISNULL(PHONE_1, ''''), ',\r\n      'ISNULL(PHONE_2, ''''), ',\r\n      'ISNULL(EMAIL, ''''), ',\r\n      'ISNULL(CONVERT(NVARCHAR(30), SUBSCRIPTION_DATE,126), ''''), ',\r\n      'ISNULL(WEBSITE, '''')',\r\n    ')',\r\n  ') AS HASH_DIFF ',\r\n  'FROM ', pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table, ' ',\r\n  'WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \r\n    formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'),\r\n  ''' AS DATETIME2)'\r\n)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SqlQuery_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\r\n  'SELECT ',\r\n  'INDEX_NUM, CUSTOMER_ID, FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY, ',\r\n  'PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, ',\r\n  'SRC_ROW_INSRT_TSTMP, ',\r\n  'HASHBYTES(''SHA2_256'', ',\r\n  'CONCAT_WS(''|'', ',\r\n    'ISNULL(FIRST_NAME,'''') , ',\r\n    'ISNULL(LAST_NAME,'''') , ',\r\n    'ISNULL(COMPANY,'''') , ',\r\n    'ISNULL(CITY,'''') , ',\r\n    'ISNULL(COUNTRY,'''') , ',\r\n    'ISNULL(PHONE_1,'''') , ',\r\n    'ISNULL(PHONE_2,'''') , ',\r\n    'ISNULL(EMAIL,'''') , ',\r\n    'ISNULL(CONVERT(NVARCHAR(30), SUBSCRIPTION_DATE,126),'''') , ',\r\n    'ISNULL(WEBSITE,'''') ',\r\n  ')) AS HASH_DIFF ',\r\n  'FROM ', pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "TruncStageTable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "IsFirstRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n  'TRUNCATE TABLE [',\n  pipeline().parameters.p_stg_schema, '].[', \n  pipeline().parameters.p_stg_table, '];'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SQL_MERGE_SCD2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LoadStage_WithHash",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "p_batch_id",
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.p_batch_id",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "/* ===== Inputs from ADF Script parameters ===== Expect a Script parameter named p_batch_id (Int32, Input) */\r\nDECLARE @BatchId INT = @p_batch_id;\r\n\r\n/* ===== Safer transaction behavior ===== */\r\nSET XACT_ABORT ON;\r\n\r\nDECLARE @today_ist  datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @today_date date         = CAST(@today_ist AS date);\r\n\r\nDECLARE @WatermarkId INT;\r\nSELECT TOP 1 @WatermarkId = WATERMARK_ID\r\nFROM dbo.DIM_WATERMARK_TRACKER\r\nWHERE PIPELINE_NAME = 'P_SCD_T2_Vivid_Schema_Customer'\r\n  AND DIM_TABLE_NAME = 'DIM_CUSTOMER_DETAILS'\r\nORDER BY UPDATED_AT_TSTMP_IST DESC;\r\n\r\nIF @WatermarkId IS NULL SET @WatermarkId = 0;  -- fallback if nothing found\r\n\r\n/* ===== Track actions for ADF output ===== */\r\nDECLARE @chg TABLE (action nvarchar(10));\r\n\r\n/* ===== (NEW) variable to hold total count of DIM table ===== */\r\nDECLARE @DimTotalCount INT;\r\n\r\nBEGIN TRY\r\n    BEGIN TRAN;\r\n\r\n    /* 1) Expire current rows whose attributes changed (close them on TODAY) */\r\n    MERGE DWH.DIM_CUSTOMER_DETAILS AS T\r\n    USING (SELECT * FROM DWH.STG_CUSTOMER_DETAILS) AS S\r\n      ON  T.INDEX_NUM    = S.INDEX_NUM\r\n      AND T.CUSTOMER_ID  = S.CUSTOMER_ID\r\n      AND T.ROW_EXPIR_DT = '9999-12-31'\r\n    WHEN MATCHED AND ISNULL(S.HASH_DIFF, 0x) <> ISNULL(T.HASH_DIFF, 0x)\r\n      THEN UPDATE SET\r\n           T.ROW_EXPIR_DT       = @today_date,       -- close on today (not yesterday)\r\n           T.LST_UPD_TSTMP_IST  = @today_ist\r\n      OUTPUT $action INTO @chg;\r\n\r\n    /* 2) Insert new versions for the keys just expired in step 1\r\n          (new rows get ROW_EFF_DT default = today; VERSION_NUM = prev+1) */\r\n    INSERT INTO DWH.DIM_CUSTOMER_DETAILS\r\n    (\r\n      INDEX_NUM, CUSTOMER_ID,\r\n      FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY,\r\n      PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, SRC_ROW_INSRT_TSTMP,\r\n      HASH_DIFF, VERSION_NUM,\r\n      WATERMARK_ID, BATCH_ID\r\n    )\r\n    SELECT\r\n      S.INDEX_NUM, S.CUSTOMER_ID,\r\n      S.FIRST_NAME, S.LAST_NAME, S.COMPANY, S.CITY, S.COUNTRY,\r\n      S.PHONE_1, S.PHONE_2, S.EMAIL, S.SUBSCRIPTION_DATE, S.WEBSITE, S.SRC_ROW_INSRT_TSTMP,\r\n      S.HASH_DIFF, T.VERSION_NUM + 1,\r\n      @WatermarkId, @BatchId\r\n    FROM DWH.STG_CUSTOMER_DETAILS S\r\n    JOIN DWH.DIM_CUSTOMER_DETAILS T\r\n      ON T.INDEX_NUM   = S.INDEX_NUM\r\n     AND T.CUSTOMER_ID = S.CUSTOMER_ID\r\n    WHERE T.ROW_EXPIR_DT = @today_date;   -- rows just closed above\r\n\r\n    /* 3) Insert brand-new keys (first versions) */\r\n    MERGE DWH.DIM_CUSTOMER_DETAILS AS T\r\n    USING (SELECT * FROM DWH.STG_CUSTOMER_DETAILS) AS S\r\n      ON  T.INDEX_NUM   = S.INDEX_NUM\r\n      AND T.CUSTOMER_ID = S.CUSTOMER_ID\r\n    WHEN NOT MATCHED BY TARGET\r\n      THEN INSERT\r\n      (\r\n        INDEX_NUM, CUSTOMER_ID,\r\n        FIRST_NAME, LAST_NAME, COMPANY, CITY, COUNTRY,\r\n        PHONE_1, PHONE_2, EMAIL, SUBSCRIPTION_DATE, WEBSITE, SRC_ROW_INSRT_TSTMP,\r\n        HASH_DIFF, VERSION_NUM,\r\n        WATERMARK_ID, BATCH_ID\r\n      )\r\n      VALUES\r\n      (\r\n        S.INDEX_NUM, S.CUSTOMER_ID,\r\n        S.FIRST_NAME, S.LAST_NAME, S.COMPANY, S.CITY, S.COUNTRY,\r\n        S.PHONE_1, S.PHONE_2, S.EMAIL, S.SUBSCRIPTION_DATE, S.WEBSITE, S.SRC_ROW_INSRT_TSTMP,\r\n        S.HASH_DIFF, 1,\r\n        @WatermarkId, @BatchId\r\n      )\r\n      OUTPUT $action INTO @chg;\r\n\t  \r\n\t  \r\n\t/* ===== (NEW) get total rows in DIM after changes ===== */\r\n    SELECT @DimTotalCount = COUNT(*) \r\n    FROM DWH.DIM_CUSTOMER_DETAILS;\r\n\r\n\r\n    COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n    IF @@TRANCOUNT > 0 ROLLBACK;\r\n    THROW;\r\nEND CATCH;\r\n\r\n/* ===== Return counts back to ADF ===== */\r\nSELECT\r\n  (SELECT COUNT(*) FROM @chg WHERE [action] = 'INSERT') AS RowsInserted,\r\n  (SELECT COUNT(*) FROM @chg WHERE [action] = 'UPDATE') AS RowsExpired,\r\n  @DimTotalCount AS DimTotalCount;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsInsertedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MERGE_SCD2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsInserted",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsInserted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRowsExpiredCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetRowsInsertedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsExpired",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsExpired)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SourceKeys_Full",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetDimTotalCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n 'SELECT ',\n '''DWH'' AS DIM_TAB_SCHEMA_NAME, ',\n '''DIM_CUSTOMER_DETAILS'' AS DIM_TABLE_NAME, ',\n '''CUSTOMER_ID'' AS BUSSINESS_ID_COL_NM, ',\n 'INDEX_NUM, ',\n 'CUSTOMER_ID AS BUSSINESS_ID ',\n 'FROM ',\n pipeline().parameters.p_src_schema, '.', pipeline().parameters.p_src_table\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "DELETE FROM DWH.DIM_SRC_KEYS\nWHERE DIM_TAB_SCHEMA_NAME = 'DWH'\nAND DIM_TABLE_NAME = 'DIM_CUSTOMER_DETAILS';",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DWH_DIM_SRC_KEYS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SQL_MarkDeletes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SourceKeys_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS__SB_ADVW",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SET XACT_ABORT ON;\r\nSET NOCOUNT ON;  -- cleaner ADF outputs (no \"N rows affected\")\r\n\r\nDECLARE @today_ist  datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @today_date date         = CAST(@today_ist AS date);\r\nDECLARE @RowsDeleted int = 0;\r\n\r\nBEGIN TRY\r\n  BEGIN TRAN;\r\n\r\n  ;WITH missing AS (\r\n    SELECT D.INDEX_NUM, D.CUSTOMER_ID\r\n    FROM DWH.DIM_CUSTOMER_DETAILS D\r\n    WHERE D.ROW_EXPIR_DT = '9999-12-31'              -- only current rows\r\n    EXCEPT\r\n    SELECT K.INDEX_NUM, K.BUSSINESS_ID\r\n    FROM DWH.DIM_SRC_KEYS K\r\n    WHERE BUSSINESS_ID_COL_NM = 'CUSTOMER_ID'\r\n  )\r\n  UPDATE D\r\n     SET D.ROW_EXPIR_DT      = @today_date,          -- expire today\r\n         D.ROW_STS_CD        = 'D',\r\n         D.LST_UPD_TSTMP_IST = @today_ist\r\n  FROM DWH.DIM_CUSTOMER_DETAILS D\r\n  JOIN missing M\r\n    ON D.INDEX_NUM   = M.INDEX_NUM\r\n   AND D.CUSTOMER_ID = M.CUSTOMER_ID\r\n  WHERE D.ROW_EXPIR_DT = '9999-12-31';\r\n\r\n  -- capture BEFORE COMMIT (commit would zero @@ROWCOUNT)\r\n  SET @RowsDeleted = @@ROWCOUNT;\r\n\r\n  COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n  IF @@TRANCOUNT > 0 ROLLBACK;\r\n  THROW;\r\nEND CATCH;\r\n\r\n-- Return count to ADF\r\nSELECT @RowsDeleted AS RowsDeleted;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsDeletedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MarkDeletes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsDeleted",
							"value": {
								"value": "@int(activity('SQL_MarkDeletes').output.resultSets[0].rows[0].RowsDeleted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMaxModifiedDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRowsDeletedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT MAX(SRC_ROW_INSRT_TSTMP) AS MAX_MODIFIED_DATE FROM ',\n  pipeline().parameters.p_stg_schema, '.', pipeline().parameters.p_stg_table,\n  ' WHERE SRC_ROW_INSRT_TSTMP > ''', variables('PreviousWatermark'), ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Get_Watermark_2308",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "SP_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetMaxWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[DimUpdateWatermark]",
							"storedProcedureParameters": {
								"DIM_LR_ROWS_DEL": {
									"value": {
										"value": "@variables('RowsDeleted')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_LR_ROWS_EXP": {
									"value": {
										"value": "@variables('RowsExpired')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_LR_ROWS_INS": {
									"value": {
										"value": "@variables('RowsInserted')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_LR_ROWS_UPD": {
									"value": {
										"value": "@variables('RowsExpired')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_TABLE_NAME": {
									"value": {
										"value": "@pipeline().parameters.p_dim_table",
										"type": "Expression"
									},
									"type": "String"
								},
								"DIM_TOTAL_ROWS": {
									"value": {
										"value": "@variables('DimTotalCounts')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SSDTM_ID": {
									"value": {
										"value": "@pipeline().parameters.p_file_table_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"UPDATED_AT_TSTMP_IST": {
									"value": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"UPDATED_BY": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"WATERMARK_VALUE": {
									"value": {
										"value": "@convertFromUtc(formatDateTime(variables('MaxWatermark'), 'yyyy-MM-ddTHH:mm:ssZ'), 'India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_LOG_MIGRATION_EVENT",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetMaxWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetMaxModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxWatermark",
							"value": {
								"value": "@if(\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss.fffffff'),\n  formatDateTime(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LoadStage_WithHash",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncStageTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('SqlQuery')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CUSTOMER_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CUSTOMER_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COMPANY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COMPANY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CITY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CITY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "COUNTRY",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "COUNTRY",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHONE_1",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHONE_1",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHONE_2",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHONE_2",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SUBSCRIPTION_DATE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SUBSCRIPTION_DATE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "WEBSITE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "WEBSITE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SRC_ROW_INSRT_TSTMP",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "SRC_ROW_INSRT_TSTMP",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "HASH_DIFF"
										},
										"sink": {
											"name": "HASH_DIFF",
											"type": "Byte[]",
											"physicalType": "varbinary"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Vivid_Raw_2408",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_STG_WITH_HASH",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SetDimTotalCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetRowsExpiredCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DimTotalCounts",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].DimTotalCount)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema": {
						"type": "string",
						"defaultValue": "VIVID"
					},
					"p_src_table": {
						"type": "string",
						"defaultValue": "BLOB_CUSTOMER_RAW"
					},
					"p_stg_schema": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_stg_table": {
						"type": "string",
						"defaultValue": "STG_CUSTOMER_DETAILS"
					},
					"p_dim_schema": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_dim_table": {
						"type": "string",
						"defaultValue": "DIM_CUSTOMER_DETAILS"
					},
					"p_file_table_id": {
						"type": "int",
						"defaultValue": 1001
					},
					"p_batch_id": {
						"type": "int",
						"defaultValue": 10001
					}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"RowsInserted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsExpired": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsDeleted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"SqlQuery": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					},
					"DimTotalCounts": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "SCDs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]",
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_RAW_TABLES')]",
				"[concat(variables('factoryId'), '/datasets/DS_DWH_DIM_SRC_KEYS')]",
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]",
				"[concat(variables('factoryId'), '/datasets/DS_Get_Watermark_2308')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]",
				"[concat(variables('factoryId'), '/datasets/DS_Vivid_Raw_2408')]",
				"[concat(variables('factoryId'), '/datasets/DS_STG_WITH_HASH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_SCD_T2_Vivid_Schema_People')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetStartTime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetWatermarkValue",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetStartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.DIM_WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', pipeline().parameters.p_src_table_name, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Watermark_Tracker",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetPreviousWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetWatermarkValue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PreviousWatermark",
							"value": {
								"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IsFirstRun",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SetPreviousWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(variables('PreviousWatermark'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SqlQuery_After_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\n  'SELECT ',\n  'INDEX_NUM,USR_ID,FIRST_NAME,LAST_NAME,SEX,EMAIL,PHONE,DATE_OF_BIRTH, ',\n  'JOB_TITLE,SRC_ROW_INSRT_TSTMP ',\n  'HASHBYTES(''SHA2_256'', ',\n    'CONCAT_WS(''|'', ',\n    'ISNULL(FIRST_NAME,'''') , ',\n    'ISNULL(LAST_NAME,'''') , ',\n    'ISNULL(SEX,'''') , ',\n    'ISNULL(DATE_OF_BIRTH,'''') , ',\n    'ISNULL(JOB_TITLE,'''') , ',\n    'ISNULL(PHONE,'''') , ',\n    'ISNULL(EMAIL,'''') , ',\n  ')) AS HASH_DIFF ',\n  'FROM ', pipeline().parameters.p_src_schema_name, '.', pipeline().parameters.p_src_table_name, ' ',\n  'WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \n    formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'),\n  ''' AS DATETIME2)'\n)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SqlQuery_1_run",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SqlQuery",
										"value": {
											"value": "@concat(\r\n  'SELECT ',\r\n  'INDEX_NUM,USR_ID,FIRST_NAME,LAST_NAME,SEX,EMAIL,PHONE,DATE_OF_BIRTH,',\r\n  'JOB_TITLE, SRC_ROW_INSRT_TSTMP, ',\r\n  'CONVERT(VARBINARY(32), HASHBYTES(''SHA2_256'', ',\r\n    'CONCAT_WS(''|'', ',\r\n      'ISNULL(LTRIM(RTRIM(FIRST_NAME)), ''''), ',\r\n      'ISNULL(LTRIM(RTRIM(LAST_NAME)), ''''), ',\r\n      'ISNULL(LTRIM(RTRIM(SEX)), ''''), ',\r\n      'ISNULL(CONVERT(nvarchar(30), DATE_OF_BIRTH, 126), ''''), ',\r\n      'ISNULL(LTRIM(RTRIM(JOB_TITLE)), ''''), ',\r\n      'ISNULL(LTRIM(RTRIM(PHONE)), ''''), ',\r\n      'ISNULL(LTRIM(RTRIM(EMAIL)), '''')',\r\n    ')',                 \r\n  ')) AS HASH_DIFF ',   \r\n  'FROM [', pipeline().parameters.p_src_schema_name, '].[', pipeline().parameters.p_src_table_name, ']'\r\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "TruncStageTable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "IsFirstRun",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat(\n  'TRUNCATE TABLE [',\n  pipeline().parameters.p_stg_schema_name, '].[', \n  pipeline().parameters.p_stg_table_name, '];'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LoadStage_WithHash",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "TruncStageTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('SqlQuery')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "USR_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "USR_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "FIRST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "LAST_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SEX",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SEX",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "EMAIL",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PHONE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PHONE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DATE_OF_BIRTH",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "DATE_OF_BIRTH",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "JOB_TITLE",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "JOB_TITLE",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SRC_ROW_INSRT_TSTMP",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"name": "SRC_ROW_INSRT_TSTMP",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "HASH_DIFF"
										},
										"sink": {
											"name": "HASH_DIFF",
											"type": "Byte[]",
											"physicalType": "varbinary"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_People_Raw_0209",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema_name",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_STG_PEOPLE_0209",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema_name",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SQL_MERGE_SCD2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LoadStage_WithHash",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "p_batch_id",
											"type": "Int32",
											"value": {
												"value": "@pipeline().parameters.p_batch_id",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": "/* ===== Inputs from ADF Script parameters =====\r\n   Expect a Script parameter named p_batch_id (Int32, Input) */\r\nDECLARE @BatchId INT = @p_batch_id;\r\n\r\n/* ===== Session safety ===== */\r\nSET NOCOUNT ON;\r\nSET XACT_ABORT ON;\r\n\r\n/* ===== IST \"today\" ===== */\r\nDECLARE @today_ist  datetime2(7) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @today_date date         = CAST(@today_ist AS date);\r\n\r\n/* ===== Get latest watermark for this pipeline/table (fallback to 0 on day 1) ===== */\r\nDECLARE @WatermarkId INT;\r\nSELECT TOP 1 @WatermarkId = WATERMARK_ID\r\nFROM dbo.DIM_WATERMARK_TRACKER\r\nWHERE PIPELINE_NAME     = 'P_SCD_T2_Vivid_Schema_People'\r\n  AND SOURCE_TABLE_NAME = 'BLOB_PEOPLE_RAW'\r\nORDER BY UPDATED_AT_TSTMP_IST DESC;\r\n\r\nIF @WatermarkId IS NULL SET @WatermarkId = 0;\r\n\r\n/* ===== Track actions for ADF output ===== */\r\nDECLARE @chg TABLE (action nvarchar(10));\r\n\r\n/* ===== (NEW) variable to hold total count of DIM table ===== */\r\nDECLARE @DimTotalCount INT;\r\n\r\nBEGIN TRY\r\n    BEGIN TRAN;\r\n\r\n    /* ===========================================================\r\n       1) Insert brand-new keys (first versions) — do this first\r\n       =========================================================== */\r\n    MERGE DWH.DIM_PEOPLE_DETAILS AS T\r\n    USING (SELECT * FROM DWH.STG_PEOPLE_DETAILS) AS S\r\n      ON  T.INDEX_NUM   = S.INDEX_NUM\r\n     AND T.USR_ID = S.USR_ID\r\n    WHEN NOT MATCHED BY TARGET THEN\r\n      INSERT (\r\n\t\tINDEX_NUM,USR_ID,FIRST_NAME,LAST_NAME,SEX,EMAIL,PHONE,DATE_OF_BIRTH,\r\n\t\tJOB_TITLE, SRC_ROW_INSRT_TSTMP,\r\n        HASH_DIFF, VERSION_NUM,\r\n        WATERMARK_ID, BATCH_ID\r\n      )\r\n      VALUES (\t\t\r\n\t\tS.INDEX_NUM, S.USR_ID, S.FIRST_NAME, S.LAST_NAME, S.SEX, S.EMAIL, S.PHONE, S.DATE_OF_BIRTH,\r\n\t\tS.JOB_TITLE, S.SRC_ROW_INSRT_TSTMP,\r\n        S.HASH_DIFF, 1,\r\n        @WatermarkId, @BatchId\r\n      )\r\n      OUTPUT $action INTO @chg;\r\n\r\n    /* ==========================================================================\r\n       2) Expire current rows whose attributes changed (close them on TODAY)\r\n       (must run before step 3 which depends on these closures)\r\n       ========================================================================== */\r\n    MERGE DWH.DIM_PEOPLE_DETAILS AS T\r\n    USING (SELECT * FROM DWH.STG_PEOPLE_DETAILS) AS S\r\n      ON  T.INDEX_NUM    = S.INDEX_NUM\r\n     AND T.USR_ID  = S.USR_ID\r\n     AND T.ROW_EXPIR_DT = '9999-12-31'\r\n    WHEN MATCHED AND ISNULL(S.HASH_DIFF, 0x) <> ISNULL(T.HASH_DIFF, 0x)\r\n      THEN UPDATE SET\r\n           T.ROW_EXPIR_DT      = @today_date,\r\n           T.LST_UPD_TSTMP_IST = @today_ist\r\n      OUTPUT $action INTO @chg;\r\n\r\n    /* =======================================================================\r\n       3) Insert new versions for the keys just expired in step 1\r\n          (new rows get ROW_EFF_DT default = today; VERSION_NUM = prev+1)\r\n       ======================================================================= */\r\n    INSERT INTO DWH.DIM_PEOPLE_DETAILS (\r\n\t  INDEX_NUM,USR_ID,FIRST_NAME,LAST_NAME,SEX,EMAIL,PHONE,DATE_OF_BIRTH,\r\n\t  JOB_TITLE, SRC_ROW_INSRT_TSTMP,\r\n      HASH_DIFF, VERSION_NUM,\r\n      WATERMARK_ID, BATCH_ID\r\n    )\r\n    OUTPUT 'INSERT' INTO @chg  -- record inserts for ADF counts\r\n    SELECT\r\n\t  S.INDEX_NUM, S.USR_ID, S.FIRST_NAME, S.LAST_NAME, S.SEX, S.EMAIL, S.PHONE, S.DATE_OF_BIRTH,\r\n\t  S.JOB_TITLE, S.SRC_ROW_INSRT_TSTMP,\r\n      S.HASH_DIFF, T.VERSION_NUM + 1,\r\n      @WatermarkId, @BatchId\r\n    FROM DWH.STG_PEOPLE_DETAILS S\r\n    JOIN DWH.DIM_PEOPLE_DETAILS T\r\n      ON T.INDEX_NUM   = S.INDEX_NUM\r\n     AND T.USR_ID = S.USR_ID\r\n    WHERE T.ROW_EXPIR_DT = @today_date;  -- rows just closed above\r\n\r\n\r\n    /* ===== (NEW) get total rows in DIM after changes ===== */\r\n    SELECT @DimTotalCount = COUNT(*) \r\n    FROM DWH.DIM_PEOPLE_DETAILS;\r\n\r\n    COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n    IF @@TRANCOUNT > 0 ROLLBACK;\r\n    THROW;\r\nEND CATCH;\r\n\r\n/* ===== Return counts back to ADF ===== */\r\nSELECT\r\n  (SELECT COUNT(*) FROM @chg WHERE [action] = 'INSERT') AS RowsInserted,\r\n  (SELECT COUNT(*) FROM @chg WHERE [action] = 'UPDATE') AS RowsExpired,\r\n  @DimTotalCount AS DimTotalCount;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsInsertedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MERGE_SCD2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsInserted",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsInserted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetRowsExpiredCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetRowsInsertedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsExpired",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].RowsExpired)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SourceKeys_Full",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetDimRowsCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat( 'SELECT ', '''DWH'' AS DIM_TAB_SCHEMA_NAME, ', '''DIM_PEOPLE_DETAILS'' AS DIM_TABLE_NAME, ', '''USR_ID'' AS BUSSINESS_ID_COL_NM, ', 'INDEX_NUM, ', 'USR_ID AS BUSSINESS_ID ', 'FROM ', pipeline().parameters.p_src_schema_name, '.', pipeline().parameters.p_src_table_name)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM DWH.DIM_SRC_KEYS\nWHERE DIM_TAB_SCHEMA_NAME = 'DWH'\nAND DIM_TABLE_NAME = 'DIM_PEOPLE_DETAILS';",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TAB_SCHEMA_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DIM_TABLE_NAME",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "INDEX_NUM",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "BUSSINESS_ID_COL_NM",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "BUSSINESS_ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_VIVID_PEOPLE",
								"type": "DatasetReference",
								"parameters": {
									"Src_Schema_Name": {
										"value": "@pipeline().parameters.p_src_schema_name",
										"type": "Expression"
									},
									"Src_Table_Name": {
										"value": "@pipeline().parameters.p_src_table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_PEOPLE_DIM_SRC_KEYS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SQL_MarkDeletes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SourceKeys_Full",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Azure_SB_Lkp",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SET XACT_ABORT ON;\r\nSET NOCOUNT ON;  -- cleaner ADF outputs (no \"N rows affected\")\r\n\r\nDECLARE @today_ist  datetime2(3) = SYSDATETIMEOFFSET() AT TIME ZONE 'India Standard Time';\r\nDECLARE @today_date date         = CAST(@today_ist AS date);\r\nDECLARE @RowsDeleted int = 0;\r\n\r\nBEGIN TRY\r\n  BEGIN TRAN;\r\n\r\n  ;WITH missing AS (\r\n    SELECT D.INDEX_NUM, D.USR_ID\r\n    FROM DWH.DIM_PEOPLE_DETAILS D\r\n    WHERE D.ROW_EXPIR_DT = '9999-12-31'              -- only current rows\r\n    EXCEPT\r\n    SELECT K.INDEX_NUM, K.BUSSINESS_ID\r\n    FROM DWH.DIM_SRC_KEYS K\r\n    WHERE BUSSINESS_ID_COL_NM = 'USR_ID'\r\n  )\r\n  UPDATE D\r\n     SET D.ROW_EXPIR_DT      = @today_date,          -- expire today\r\n         D.ROW_STS_CD        = 'D',\r\n         D.LST_UPD_TSTMP_IST = @today_ist\r\n  FROM DWH.DIM_PEOPLE_DETAILS D\r\n  JOIN missing M\r\n    ON D.INDEX_NUM   = M.INDEX_NUM\r\n   AND D.USR_ID = M.USR_ID\r\n  WHERE D.ROW_EXPIR_DT = '9999-12-31';\r\n\r\n  -- capture BEFORE COMMIT (commit would zero @@ROWCOUNT)\r\n  SET @RowsDeleted = @@ROWCOUNT;\r\n\r\n  COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n  IF @@TRANCOUNT > 0 ROLLBACK;\r\n  THROW;\r\nEND CATCH;\r\n\r\n-- Return count to ADF\r\nSELECT @RowsDeleted AS RowsDeleted;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SetRowsDeletedCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SQL_MarkDeletes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RowsDeleted",
							"value": {
								"value": "@int(activity('SQL_MarkDeletes').output.resultSets[0].rows[0].RowsDeleted)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "GetMaxModifiedDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetRowsDeletedCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n  'SELECT MAX(SRC_ROW_INSRT_TSTMP) AS MAX_MODIFIED_DATE FROM ',\n  pipeline().parameters.p_stg_schema_name, '.', pipeline().parameters.p_stg_table_name,\n  ' WHERE SRC_ROW_INSRT_TSTMP > ''', variables('PreviousWatermark'), ''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Vivid_People_0409",
								"type": "DatasetReference",
								"parameters": {
									"Stg_Schema_Name": {
										"value": "@pipeline().parameters.p_stg_schema_name",
										"type": "Expression"
									},
									"Stg_Table_Name": {
										"value": "@pipeline().parameters.p_stg_table_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SetMaxWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetMaxModifiedDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxWatermark",
							"value": {
								"value": "@if(\n  empty(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE),\n  formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss.fffffff'),\n  formatDateTime(activity('GetMaxModifiedDate').output.firstRow.MAX_MODIFIED_DATE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SP_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SetMaxWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[DimUpdateWatermark]",
							"storedProcedureParameters": {
								"DIM_LR_ROWS_DEL": {
									"value": {
										"value": "@variables('RowsDeleted')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_LR_ROWS_EXP": {
									"value": {
										"value": "@variables('RowsExpired')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_LR_ROWS_INS": {
									"value": {
										"value": "@variables('RowsInserted')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_LR_ROWS_UPD": {
									"value": {
										"value": "@variables('RowsExpired')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"DIM_TABLE_NAME": {
									"value": {
										"value": "@pipeline().parameters.p_dim_table_name",
										"type": "Expression"
									},
									"type": "String"
								},
								"DIM_TOTAL_ROWS": {
									"value": {
										"value": "@variables('DimTotalCounts')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"SSDTM_ID": {
									"value": {
										"value": "@pipeline().parameters.p_file_table_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"UPDATED_AT_TSTMP_IST": {
									"value": {
										"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"UPDATED_BY": {
									"value": {
										"value": "@pipeline().TriggerName",
										"type": "Expression"
									},
									"type": "String"
								},
								"WATERMARK_VALUE": {
									"value": {
										"value": "@convertFromUtc(formatDateTime(variables('MaxWatermark'), 'yyyy-MM-ddTHH:mm:ssZ'), 'India Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_LOG_MIGRATION_EVENT",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetDimRowsCounts",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetRowsExpiredCounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DimTotalCounts",
							"value": {
								"value": "@int(activity('SQL_MERGE_SCD2').output.resultSets[0].rows[0].DimTotalCount)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_src_schema_name": {
						"type": "string",
						"defaultValue": "VIVID"
					},
					"p_src_table_name": {
						"type": "string",
						"defaultValue": "BLOB_PEOPLE_RAW"
					},
					"p_stg_schema_name": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_stg_table_name": {
						"type": "string",
						"defaultValue": "STG_PEOPLE_DETAILS"
					},
					"p_dim_schema_name": {
						"type": "string",
						"defaultValue": "DWH"
					},
					"p_dim_table_name": {
						"type": "string",
						"defaultValue": "DIM_PEOPLE_DETAILS"
					},
					"p_file_table_id": {
						"type": "int",
						"defaultValue": 1002
					},
					"p_batch_id": {
						"type": "int",
						"defaultValue": 12001
					}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"PreviousWatermark": {
						"type": "String"
					},
					"RowsInserted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsExpired": {
						"type": "Integer",
						"defaultValue": 0
					},
					"RowsDeleted": {
						"type": "Integer",
						"defaultValue": 0
					},
					"SqlQuery": {
						"type": "String"
					},
					"MaxWatermark": {
						"type": "String"
					},
					"DimTotalCounts": {
						"type": "Integer",
						"defaultValue": 0
					}
				},
				"folder": {
					"name": "SCDs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Watermark_Tracker')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]",
				"[concat(variables('factoryId'), '/datasets/DS_People_Raw_0209')]",
				"[concat(variables('factoryId'), '/datasets/DS_STG_PEOPLE_0209')]",
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_PEOPLE')]",
				"[concat(variables('factoryId'), '/datasets/DS_PEOPLE_DIM_SRC_KEYS')]",
				"[concat(variables('factoryId'), '/datasets/DS_Vivid_People_0409')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_LOG_MIGRATION_EVENT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunDDLs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "It runs DDLs",
				"activities": [
					{
						"name": "DropTables",
						"description": "Drop Tables if exists",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Run_DDLs_Azure_2507",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "DROP TABLE IF EXISTS HR_JOB_HISTORY;\r\nDROP TABLE IF EXISTS HR_EMPLOYEES;\r\nDROP TABLE IF EXISTS HR_DEPARTMENTS;\r\nDROP TABLE IF EXISTS HR_LOCATIONS;\r\nDROP TABLE IF EXISTS HR_COUNTRIES;\r\nDROP TABLE IF EXISTS HR_REGIONS;\r\nDROP TABLE IF EXISTS HR_JOBS;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "CreateTables",
						"description": "Create Tables etl-oracle database in azure",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DropTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_Run_DDLs_Azure_2507",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "CREATE TABLE HR_JOBS (\r\n  JOB_ID NVARCHAR(100),\r\n  JOB_TITLE NVARCHAR(35) NOT NULL,\r\n  MIN_SALARY FLOAT,\r\n  MAX_SALARY FLOAT,\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (JOB_ID)\r\n);\r\n\r\nCREATE TABLE HR_REGIONS (\r\n  REGION_ID NVARCHAR(100) NOT NULL,\r\n  REGION_NAME NVARCHAR(25),\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (REGION_ID)\r\n);\r\n\r\nCREATE TABLE HR_COUNTRIES (\r\n  COUNTRY_ID NVARCHAR(100) NOT NULL,\r\n  COUNTRY_NAME NVARCHAR(40),\r\n  REGION_ID FLOAT,\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (COUNTRY_ID)\r\n);\r\n\r\nCREATE TABLE HR_LOCATIONS (\r\n  LOCATION_ID NVARCHAR(100),\r\n  STREET_ADDRESS NVARCHAR(40),\r\n  POSTAL_CODE NVARCHAR(12),\r\n  CITY NVARCHAR(30) NOT NULL,\r\n  STATE_PROVINCE NVARCHAR(25),\r\n  COUNTRY_ID CHAR(2),\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (LOCATION_ID)\r\n);\r\n\r\nCREATE TABLE HR_DEPARTMENTS (\r\n  DEPARTMENT_ID NVARCHAR(100),\r\n  DEPARTMENT_NAME NVARCHAR(30) NOT NULL,\r\n  MANAGER_ID INT,\r\n  LOCATION_ID INT,\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (DEPARTMENT_ID)\r\n);\r\n\r\nCREATE TABLE HR_EMPLOYEES (\r\n  EMPLOYEE_ID NVARCHAR(100),\r\n  FIRST_NAME NVARCHAR(20),\r\n  LAST_NAME NVARCHAR(25) NOT NULL,\r\n  EMAIL NVARCHAR(25) NOT NULL,\r\n  PHONE_NUMBER NVARCHAR(20),\r\n  HIRE_DATE DATETIME NOT NULL,\r\n  JOB_ID NVARCHAR(10) NOT NULL,\r\n  SALARY DECIMAL(8,2),\r\n  COMMISSION_PCT DECIMAL(2,2),\r\n  MANAGER_ID INT,\r\n  DEPARTMENT_ID INT,\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (EMPLOYEE_ID),\r\n  UNIQUE (EMAIL),\r\n  CHECK (salary > 0)\r\n);\r\n\r\nCREATE TABLE HR_JOB_HISTORY (\r\n  EMPLOYEE_ID NVARCHAR(100) NOT NULL,\r\n  START_DATE DATETIME NOT NULL,\r\n  END_DATE DATETIME NOT NULL,\r\n  JOB_ID NVARCHAR(10) NOT NULL,\r\n  DEPARTMENT_ID INT,\r\n  SRC_ROW_INSERT_TSTMP DATETIME2,\r\n  WATERMARK_VALUE NVARCHAR(50) NULL,\r\n  FILE_TABLE_ID INTEGER,\r\n  BATCH_ID INTEGER,\r\n  SRC_TBL_NM NVARCHAR(100),\r\n  PIPLN_NM NVARCHAR(100),\r\n  ROW_VERSION TIMESTAMP,\r\n  INSERT_TSTMP_IST DATETIME2 DEFAULT SYSDATETIME() AT TIME ZONE 'UTC' AT TIME ZONE 'India Standard Time',\r\n  PRIMARY KEY (EMPLOYEE_ID, START_DATE),\r\n  CHECK (end_date > start_date)\r\n);"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "DDLs"
				},
				"annotations": [],
				"lastPublishTime": "2025-08-14T03:03:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Run_DDLs_Azure_2507')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADVW_Src_2807')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SRC_ADVW_SCHEMA_NAME": {
						"type": "String"
					},
					"SRC_ADVW_TABLE_NAME": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SRC_ADVW_SCHEMA_NAME",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().SRC_ADVW_TABLE_NAME",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Azure_ETL_Oracle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_tgt_etl_orcl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Azure_Tgt_Schema_Name": {
						"type": "String"
					},
					"Azure_Tgt_Table_name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Azure_Tgt_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Azure_Tgt_Table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_tgt_etl_orcl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Azure_Sandbox_LKP_2507')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FILE_TABLE_MAPPING"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Customer_RAW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "VIVID",
					"table": "BLOB_CUSTOMER_RAW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DIM_CUST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_SCD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_SID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "INDEX_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "COMPANY",
						"type": "nvarchar"
					},
					{
						"name": "CITY",
						"type": "nvarchar"
					},
					{
						"name": "COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_1",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_2",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "SUBSCRIPTION_DATE",
						"type": "nvarchar"
					},
					{
						"name": "WEBSITE",
						"type": "nvarchar"
					},
					{
						"name": "SRC_ROW_INSRT_TSTMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "HASH_DIFF",
						"type": "varbinary"
					},
					{
						"name": "WATERMARK_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BATCH_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_EFF_DT",
						"type": "date"
					},
					{
						"name": "ROW_EXPIR_DT",
						"type": "date"
					},
					{
						"name": "ROW_STS_CD",
						"type": "nvarchar"
					},
					{
						"name": "VERSION_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "INSERT_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LST_UPD_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "DWH",
					"table": "DIM_CUSTOMER_DETAILS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DWH_DIM_SRC_KEYS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_SCD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SRC_KEYS_SID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DIM_TAB_SCHEMA_NAME",
						"type": "nvarchar"
					},
					{
						"name": "DIM_TABLE_NAME",
						"type": "nvarchar"
					},
					{
						"name": "INDEX_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BUSSINESS_ID_COL_NM",
						"type": "nvarchar"
					},
					{
						"name": "BUSSINESS_ID",
						"type": "nvarchar"
					},
					{
						"name": "INSERT_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "DWH",
					"table": "DIM_SRC_KEYS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DWH_SB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_SID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "INDEX_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "COMPANY",
						"type": "nvarchar"
					},
					{
						"name": "CITY",
						"type": "nvarchar"
					},
					{
						"name": "COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_1",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_2",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "SUBSCRIPTION_DATE",
						"type": "date"
					},
					{
						"name": "WEBSITE",
						"type": "nvarchar"
					},
					{
						"name": "SRC_ROW_INSRT_TSTMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "WATERMARK_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BATCH_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_EFF_DT",
						"type": "date"
					},
					{
						"name": "ROW_EXPIR_DT",
						"type": "date"
					},
					{
						"name": "ROW_STS_CD",
						"type": "nchar"
					},
					{
						"name": "INSERT_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LST_UPD_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "DWH",
					"table": "DIM_CUSTOMER_DETAILS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DWH_STG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Get_Watermark_2308')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Leads_0805')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "VIVID",
					"table": "BLOB_LEAD_RAW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Org_0805')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_PEOPLE_DIM_SRC_KEYS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "DWH",
					"table": "DIM_SRC_KEYS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_People_Raw_0209')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Src_Schema_Name": {
						"type": "String"
					},
					"Src_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Src_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Src_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_PhonePe_Trans_Raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Products_0805')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "VIVID",
					"table": "BLOB_PRODUCTS_RAW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SB_TGT_DWH_1808')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SB_TGT_SCD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_SCD",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_SID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "COMPANY",
						"type": "nvarchar"
					},
					{
						"name": "CITY",
						"type": "nvarchar"
					},
					{
						"name": "COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_1",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_2",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "SUBSCRIPTION_DATE",
						"type": "date"
					},
					{
						"name": "WEBSITE",
						"type": "nvarchar"
					},
					{
						"name": "SRC_ROW_INSRT_TSTMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "WATERMARK_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BATCH_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_EFF_DT",
						"type": "date"
					},
					{
						"name": "ROW_EXPIR_DT",
						"type": "date"
					},
					{
						"name": "ROW_STS_CD",
						"type": "nchar"
					},
					{
						"name": "VERSION_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HASHDIFF",
						"type": "varbinary"
					},
					{
						"name": "INSERT_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LST_UPD_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "DWH",
					"table": "DIM_CUSTOMER_DETAILS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SB_Tgt_SalesLT_M')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_Tgt_SalesLT_M",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Tgt_Schema_name": {
						"type": "String"
					},
					"Tgt_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Tgt_Schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Tgt_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_Tgt_SalesLT_M')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SB_Vivid_1808')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Src_Schema_Name": {
						"type": "String"
					},
					"Src_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Src_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Src_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SRC_DIM_LKP_1807')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FILE_TABLE_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SRC_NAME",
						"type": "nvarchar"
					},
					{
						"name": "TGT_NAME",
						"type": "nvarchar"
					},
					{
						"name": "SRC_SCHEMA_NAME",
						"type": "nvarchar"
					},
					{
						"name": "TGT_SCHEMA_NAME",
						"type": "nvarchar"
					},
					{
						"name": "SRC_TYPE",
						"type": "nvarchar"
					},
					{
						"name": "TGT_TYPE",
						"type": "nvarchar"
					},
					{
						"name": "ROW_ADDED_BY",
						"type": "nvarchar"
					},
					{
						"name": "ROW_STS_CD",
						"type": "nvarchar"
					},
					{
						"name": "PIPLN_NM",
						"type": "nvarchar"
					},
					{
						"name": "ROW_VERSION",
						"type": "timestamp"
					},
					{
						"name": "INSERT_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "SRC_STG_DIM_TABLE_MAPPING"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_STG_PEOPLE_0209')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_STG_WITH_HASH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_SCD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_TGT_Azure_etl_orcl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_tgt_etl_orcl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Azure_Tgt_Table_Name": {
						"type": "String"
					},
					"Azure_Tgt_Schema_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Azure_Tgt_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Azure_Tgt_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_tgt_etl_orcl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Target_Azure_etlorcl_2507')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_tgt_etl_orcl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Tgt_Schema_Name": {
						"type": "String"
					},
					"Tgt_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Tgt_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Tgt_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_tgt_etl_orcl')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_DWH_DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Dim_Schema_Name": {
						"type": "String"
					},
					"Dim_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Dim_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Dim_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Tgt_DWH_StgCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_VIVID_CUSTOMER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_SCD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Src_Schema_Name": {
						"type": "String"
					},
					"Src_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "INDEX_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "COMPANY",
						"type": "nvarchar"
					},
					{
						"name": "CITY",
						"type": "nvarchar"
					},
					{
						"name": "COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_1",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_2",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "SUBSCRIPTION_DATE",
						"type": "nvarchar"
					},
					{
						"name": "WEBSITE",
						"type": "nvarchar"
					},
					{
						"name": "SRC_ROW_INSRT_TSTMP",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Src_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Src_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_VIVID_PEOPLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Src_Schema_Name": {
						"type": "String"
					},
					"Src_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Src_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Src_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_VIVID_RAW_TABLES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SB_SCD",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Src_Schema_Name": {
						"type": "String"
					},
					"Src_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "INDEX_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "COMPANY",
						"type": "nvarchar"
					},
					{
						"name": "CITY",
						"type": "nvarchar"
					},
					{
						"name": "COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_1",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_2",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "SUBSCRIPTION_DATE",
						"type": "nvarchar"
					},
					{
						"name": "WEBSITE",
						"type": "nvarchar"
					},
					{
						"name": "SRC_ROW_INSRT_TSTMP",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Src_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Src_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SB_SCD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Vivid_People_0409')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Stg_Schema_Name": {
						"type": "String"
					},
					"Stg_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Stg_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Stg_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Vivid_Raw_2408')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Src_Schema_Name": {
						"type": "String"
					},
					"Src_Table_Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Src_Schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Src_Table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Watermark_Tracker')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "WATERMARK_TRACKER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/People_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS__SB_ADVW",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "VIVID",
					"table": "BLOB_PEOPLE_RAW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS__SB_ADVW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AZURE_ORACLE_2507')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_AZURE_ORACLE_2507_properties_typeProperties_server')]",
					"database": "[parameters('LS_AZURE_ORACLE_2507_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_AZURE_ORACLE_2507_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_AZURE_ORACLE_2507_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Azure_SB_Lkp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_Azure_SB_Lkp_properties_typeProperties_server')]",
					"database": "[parameters('LS_Azure_SB_Lkp_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_Azure_SB_Lkp_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_Azure_SB_Lkp_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Azure_tgt_etl_orcl')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_Azure_tgt_etl_orcl_properties_typeProperties_server')]",
					"database": "[parameters('LS_Azure_tgt_etl_orcl_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_Azure_tgt_etl_orcl_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_Azure_tgt_etl_orcl_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_LOG_MIGRATION_EVENT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_LOG_MIGRATION_EVENT_properties_typeProperties_server')]",
					"database": "[parameters('LS_LOG_MIGRATION_EVENT_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_LOG_MIGRATION_EVENT_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_LOG_MIGRATION_EVENT_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Run_DDLs_Azure_2507')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_Run_DDLs_Azure_2507_properties_typeProperties_server')]",
					"database": "[parameters('LS_Run_DDLs_Azure_2507_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_Run_DDLs_Azure_2507_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_Run_DDLs_Azure_2507_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SB_SCD')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_SB_SCD_properties_typeProperties_server')]",
					"database": "[parameters('LS_SB_SCD_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SB_SCD_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_SB_SCD_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SB_Tgt_SalesLT_M')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_SB_Tgt_SalesLT_M_properties_typeProperties_server')]",
					"database": "[parameters('LS_SB_Tgt_SalesLT_M_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SB_Tgt_SalesLT_M_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_SB_Tgt_SalesLT_M_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS__SB_ADVW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS__SB_ADVW_properties_typeProperties_server')]",
					"database": "[parameters('LS__SB_ADVW_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS__SB_ADVW_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS__SB_ADVW_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIR-OnPremise')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_LoadStage_WithHash')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference"
							},
							"name": "VivivdRawTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DWH_STG",
								"type": "DatasetReference"
							},
							"name": "StgCustomerDetails"
						}
					],
					"transformations": [
						{
							"name": "addHashDiffColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     df_sqlQuery as string",
						"}",
						"source(output(",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (toString($df_sqlQuery)),",
						"     format: 'query') ~> VivivdRawTable",
						"VivivdRawTable derive(HASH_DIFF = unhex(\r",
						"  md5(\r",
						"    concat(\r",
						"      toString(upper(trim(FIRST_NAME))), '|',\r",
						"      toString(upper(trim(LAST_NAME))),  '|',\r",
						"      toString(trim(COMPANY)),           '|',\r",
						"      toString(upper(trim(CITY))),       '|',\r",
						"      toString(upper(trim(COUNTRY))),    '|',\r",
						"      toString(replace(PHONE_1,' ','')), '|',\r",
						"      toString(replace(PHONE_2,' ','')), '|',\r",
						"      toString(lower(trim(EMAIL))),      '|',\r",
						"      toString(trim(SUBSCRIPTION_DATE)), '|',\r",
						"      toString(trim(WEBSITE))\r",
						"    )\r",
						"  )\r",
						")) ~> addHashDiffColumn",
						"addHashDiffColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgCustomerDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_RAW_TABLES')]",
				"[concat(variables('factoryId'), '/datasets/DS_DWH_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD_T2_Vivid_Customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VIVID_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "VividCustomerRaw"
						},
						{
							"dataset": {
								"referenceName": "DS_SB_TGT_SCD",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DWH_SB",
								"type": "DatasetReference"
							},
							"name": "DwhDimCustomerInsert"
						},
						{
							"dataset": {
								"referenceName": "DS_DWH_SB",
								"type": "DatasetReference"
							},
							"name": "DwhDimCustomerUpdate"
						}
					],
					"transformations": [
						{
							"name": "SourceJoinDimension"
						},
						{
							"name": "SelectDistinctColumns"
						},
						{
							"name": "DcTrackChanges"
						},
						{
							"name": "CheckNewOrChangedRow"
						},
						{
							"name": "NewRowsUnionChangedRows"
						},
						{
							"name": "DcAddMetadataColumns"
						},
						{
							"name": "DcExpireSetup"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: true,",
						"     waterMarkColumn: 'SRC_ROW_INSRT_TSTMP',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> VividCustomerRaw",
						"source(output(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"VividCustomerRaw, DimCustomer join(VividCustomerRaw@CUSTOMER_ID == DimCustomer@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourceJoinDimension",
						"SourceJoinDimension select(mapColumn(",
						"          INDEX_NUM = VividCustomerRaw@INDEX_NUM,",
						"          CUSTOMER_ID = VividCustomerRaw@CUSTOMER_ID,",
						"          FIRST_NAME = VividCustomerRaw@FIRST_NAME,",
						"          LAST_NAME = VividCustomerRaw@LAST_NAME,",
						"          COMPANY = VividCustomerRaw@COMPANY,",
						"          CITY = VividCustomerRaw@CITY,",
						"          COUNTRY = VividCustomerRaw@COUNTRY,",
						"          PHONE_1 = VividCustomerRaw@PHONE_1,",
						"          PHONE_2 = VividCustomerRaw@PHONE_2,",
						"          EMAIL = VividCustomerRaw@EMAIL,",
						"          SUBSCRIPTION_DATE = VividCustomerRaw@SUBSCRIPTION_DATE,",
						"          WEBSITE = VividCustomerRaw@WEBSITE,",
						"          SRC_ROW_INSRT_TSTMP = VividCustomerRaw@SRC_ROW_INSRT_TSTMP,",
						"          CUSTOMER_SID,",
						"          TGT_INDEX_NUM = DimCustomer@INDEX_NUM,",
						"          TGT_CUSTOMER_ID = DimCustomer@CUSTOMER_ID,",
						"          TGT_FIRST_NAME = DimCustomer@FIRST_NAME,",
						"          TGT_LAST_NAME = DimCustomer@LAST_NAME,",
						"          TGT_COMPANY = DimCustomer@COMPANY,",
						"          TGT_CITY = DimCustomer@CITY,",
						"          TGT_COUNTRY = DimCustomer@COUNTRY,",
						"          TGT_PHONE_1 = DimCustomer@PHONE_1,",
						"          TGT_PHONE_2 = DimCustomer@PHONE_2,",
						"          TGT_EMAIL = DimCustomer@EMAIL,",
						"          TGT_SUBSCRIPTION_DATE = DimCustomer@SUBSCRIPTION_DATE,",
						"          TGT_WEBSITE = DimCustomer@WEBSITE,",
						"          TGT_SRC_ROW_INSRT_TSTMP = DimCustomer@SRC_ROW_INSRT_TSTMP",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectDistinctColumns",
						"SelectDistinctColumns derive(isChanged = iif(\r",
						"     md5(INDEX_NUM)  != md5(TGT_INDEX_NUM)  ||\r",
						"    md5(FIRST_NAME) != md5(TGT_FIRST_NAME) ||\r",
						"    md5(LAST_NAME)  != md5(TGT_LAST_NAME)  ||\r",
						"    md5(COMPANY)    != md5(TGT_COMPANY)    ||\r",
						"    md5(CITY)       != md5(TGT_CITY)       ||\r",
						"    md5(COUNTRY)    != md5(TGT_COUNTRY)    ||\r",
						"    md5(PHONE_1)    != md5(TGT_PHONE_1)    ||\r",
						"    md5(PHONE_2)    != md5(TGT_PHONE_2)    ||\r",
						"    md5(EMAIL)      != md5(TGT_EMAIL)      ||\r",
						"    md5(SUBSCRIPTION_DATE) != md5(TGT_SUBSCRIPTION_DATE) ||\r",
						"    md5(WEBSITE)    != md5(TGT_WEBSITE),\r",
						"    true(),\r",
						"    false()\r",
						")) ~> DcTrackChanges",
						"DcTrackChanges split(isNull(TGT_CUSTOMER_ID),",
						"     !isNull(TGT_CUSTOMER_ID) && (\r",
						"  coalesce(FIRST_NAME , '') != coalesce(TGT_FIRST_NAME , '') ||\r",
						"  coalesce(LAST_NAME  , '') != coalesce(TGT_LAST_NAME  , '') ||\r",
						"  coalesce(COMPANY    , '') != coalesce(TGT_COMPANY    , '') ||\r",
						"  coalesce(CITY       , '') != coalesce(TGT_CITY       , '') ||\r",
						"  coalesce(COUNTRY    , '') != coalesce(TGT_COUNTRY    , '') ||\r",
						"  coalesce(PHONE_1    , '') != coalesce(TGT_PHONE_1    , '') ||\r",
						"  coalesce(PHONE_2    , '') != coalesce(TGT_PHONE_2    , '') ||\r",
						"  coalesce(EMAIL      , '') != coalesce(TGT_EMAIL      , '') ||  \r",
						"  coalesce(SUBSCRIPTION_DATE      , '') != coalesce(TGT_SUBSCRIPTION_DATE      , '') ||\r",
						"  coalesce(WEBSITE    , '') != coalesce(TGT_WEBSITE    , '')\r",
						"),",
						"     disjoint: false) ~> CheckNewOrChangedRow@(NewRows, ChangedRows)",
						"CheckNewOrChangedRow@NewRows, CheckNewOrChangedRow@ChangedRows union(byName: true)~> NewRowsUnionChangedRows",
						"NewRowsUnionChangedRows derive(WATERMARK_ID = 10002,",
						"          BATCH_ID = 50001,",
						"          ROW_EFF_DT = currentDate(),",
						"          ROW_EXPIR_DT = toDate('9999-12-31'),",
						"          ROW_STS_CD = 'A') ~> DcAddMetadataColumns",
						"CheckNewOrChangedRow@ChangedRows derive(ROW_STS_CD = 'I',",
						"          ROW_EXPIR_DT = toDate(fromUTC(currentUTC(), 'India Standard Time')),",
						"          LST_UPD_TSTMP_IST = fromUTC(currentUTC(), 'India Standard Time')) ~> DcExpireSetup",
						"DcExpireSetup alterRow(updateIf(true())) ~> alterRow1",
						"DcAddMetadataColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as date,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          INDEX_NUM,",
						"          CUSTOMER_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          COMPANY,",
						"          CITY,",
						"          COUNTRY,",
						"          PHONE_1,",
						"          PHONE_2,",
						"          EMAIL,",
						"          SUBSCRIPTION_DATE,",
						"          WEBSITE,",
						"          SRC_ROW_INSRT_TSTMP,",
						"          WATERMARK_ID,",
						"          BATCH_ID,",
						"          ROW_EFF_DT,",
						"          ROW_EXPIR_DT,",
						"          ROW_STS_CD",
						"     )) ~> DwhDimCustomerInsert",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as date,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CUSTOMER_SID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DwhDimCustomerUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_CUSTOMER')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_TGT_SCD')]",
				"[concat(variables('factoryId'), '/datasets/DS_DWH_SB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD_T2_Vivid_Scd')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference"
							},
							"name": "VividCustomerRaw"
						},
						{
							"dataset": {
								"referenceName": "DS_SB_TGT_SCD",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_DWH_SB",
								"type": "DatasetReference"
							},
							"name": "DwhDimCustomerInsert"
						},
						{
							"dataset": {
								"referenceName": "DS_DWH_SB",
								"type": "DatasetReference"
							},
							"name": "DwhDimCustomerUpdate"
						}
					],
					"transformations": [
						{
							"name": "SourceJoinDimension"
						},
						{
							"name": "SelectDistinctColumns"
						},
						{
							"name": "DcTrackChanges"
						},
						{
							"name": "CheckNewOrChangedRow"
						},
						{
							"name": "NewRowsUnionChangedRows"
						},
						{
							"name": "DcAddMetadataColumns"
						},
						{
							"name": "DcExpireSetup"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     waterMarkColumn: 'SRC_ROW_INSRT_TSTMP',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> VividCustomerRaw",
						"source(output(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"VividCustomerRaw, DimCustomer join(VividCustomerRaw@INDEX_NUM == DimCustomer@INDEX_NUM,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourceJoinDimension",
						"SourceJoinDimension select(mapColumn(",
						"          INDEX_NUM = VividCustomerRaw@INDEX_NUM,",
						"          CUSTOMER_ID = VividCustomerRaw@CUSTOMER_ID,",
						"          FIRST_NAME = VividCustomerRaw@FIRST_NAME,",
						"          LAST_NAME = VividCustomerRaw@LAST_NAME,",
						"          COMPANY = VividCustomerRaw@COMPANY,",
						"          CITY = VividCustomerRaw@CITY,",
						"          COUNTRY = VividCustomerRaw@COUNTRY,",
						"          PHONE_1 = VividCustomerRaw@PHONE_1,",
						"          PHONE_2 = VividCustomerRaw@PHONE_2,",
						"          EMAIL = VividCustomerRaw@EMAIL,",
						"          SUBSCRIPTION_DATE = VividCustomerRaw@SUBSCRIPTION_DATE,",
						"          WEBSITE = VividCustomerRaw@WEBSITE,",
						"          SRC_ROW_INSRT_TSTMP = VividCustomerRaw@SRC_ROW_INSRT_TSTMP,",
						"          CUSTOMER_SID,",
						"          TGT_INDEX_NUM = DimCustomer@INDEX_NUM,",
						"          TGT_CUSTOMER_ID = DimCustomer@CUSTOMER_ID,",
						"          TGT_FIRST_NAME = DimCustomer@FIRST_NAME,",
						"          TGT_LAST_NAME = DimCustomer@LAST_NAME,",
						"          TGT_COMPANY = DimCustomer@COMPANY,",
						"          TGT_CITY = DimCustomer@CITY,",
						"          TGT_COUNTRY = DimCustomer@COUNTRY,",
						"          TGT_PHONE_1 = DimCustomer@PHONE_1,",
						"          TGT_PHONE_2 = DimCustomer@PHONE_2,",
						"          TGT_EMAIL = DimCustomer@EMAIL,",
						"          TGT_SUBSCRIPTION_DATE = DimCustomer@SUBSCRIPTION_DATE,",
						"          TGT_WEBSITE = DimCustomer@WEBSITE,",
						"          TGT_SRC_ROW_INSRT_TSTMP = DimCustomer@SRC_ROW_INSRT_TSTMP",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectDistinctColumns",
						"SelectDistinctColumns derive(isChanged = iif(\r",
						"     md5(INDEX_NUM)  != md5(TGT_INDEX_NUM)  ||\r",
						"    md5(FIRST_NAME) != md5(TGT_FIRST_NAME) ||\r",
						"    md5(LAST_NAME)  != md5(TGT_LAST_NAME)  ||\r",
						"    md5(COMPANY)    != md5(TGT_COMPANY)    ||\r",
						"    md5(CITY)       != md5(TGT_CITY)       ||\r",
						"    md5(COUNTRY)    != md5(TGT_COUNTRY)    ||\r",
						"    md5(PHONE_1)    != md5(TGT_PHONE_1)    ||\r",
						"    md5(PHONE_2)    != md5(TGT_PHONE_2)    ||\r",
						"    md5(EMAIL)      != md5(TGT_EMAIL)      ||\r",
						"    md5(SUBSCRIPTION_DATE) != md5(TGT_SUBSCRIPTION_DATE) ||\r",
						"    md5(WEBSITE)    != md5(TGT_WEBSITE),\r",
						"    true(),\r",
						"    false()\r",
						")) ~> DcTrackChanges",
						"DcTrackChanges split(isNull(CUSTOMER_ID),",
						"     !isNull(TGT_CUSTOMER_ID) && (\r",
						"  coalesce(FIRST_NAME , '') != coalesce(TGT_FIRST_NAME , '') ||\r",
						"  coalesce(LAST_NAME  , '') != coalesce(TGT_LAST_NAME  , '') ||\r",
						"  coalesce(COMPANY    , '') != coalesce(TGT_COMPANY    , '') ||\r",
						"  coalesce(CITY       , '') != coalesce(TGT_CITY       , '') ||\r",
						"  coalesce(COUNTRY    , '') != coalesce(TGT_COUNTRY    , '') ||\r",
						"  coalesce(PHONE_1    , '') != coalesce(TGT_PHONE_1    , '') ||\r",
						"  coalesce(PHONE_2    , '') != coalesce(TGT_PHONE_2    , '') ||\r",
						"  coalesce(EMAIL      , '') != coalesce(TGT_EMAIL      , '') ||  \r",
						"  coalesce(SUBSCRIPTION_DATE      , '') != coalesce(SUBSCRIPTION_DATE      , '') ||\r",
						"  coalesce(WEBSITE    , '') != coalesce(TGT_WEBSITE    , '')\r",
						"),",
						"     disjoint: false) ~> CheckNewOrChangedRow@(NewRows, ChangedRows)",
						"CheckNewOrChangedRow@NewRows, CheckNewOrChangedRow@ChangedRows union(byName: true)~> NewRowsUnionChangedRows",
						"NewRowsUnionChangedRows derive(WATERMARK_ID = 10002,",
						"          BATCH_ID = 50001,",
						"          ROW_EFF_DT = currentDate(),",
						"          ROW_EXPIR_DT = toDate('9999-12-31'),",
						"          ROW_STS_CD = 'A') ~> DcAddMetadataColumns",
						"CheckNewOrChangedRow@ChangedRows derive(ROW_STS_CD = 'I',",
						"          ROW_EXPIR_DT = toDate(fromUTC(currentUTC(), 'India Standard Time'))) ~> DcExpireSetup",
						"DcExpireSetup alterRow(updateIf(true())) ~> alterRow1",
						"DcAddMetadataColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as date,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          INDEX_NUM,",
						"          CUSTOMER_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          COMPANY,",
						"          CITY,",
						"          COUNTRY,",
						"          PHONE_1,",
						"          PHONE_2,",
						"          EMAIL,",
						"          SUBSCRIPTION_DATE,",
						"          WEBSITE,",
						"          SRC_ROW_INSRT_TSTMP,",
						"          WATERMARK_ID,",
						"          BATCH_ID,",
						"          ROW_EFF_DT,",
						"          ROW_EXPIR_DT,",
						"          ROW_STS_CD",
						"     )) ~> DwhDimCustomerInsert",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as date,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['CUSTOMER_SID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DwhDimCustomerUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_RAW_TABLES')]",
				"[concat(variables('factoryId'), '/datasets/DS_SB_TGT_SCD')]",
				"[concat(variables('factoryId'), '/datasets/DS_DWH_SB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SourceKeys_Full')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference"
							},
							"name": "VividRawTables"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_VIVID_RAW_TABLES",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> VividRawTables",
						"VividRawTables sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_VIVID_RAW_TABLES')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VividCustomer')]",
			"type": "Microsoft.DataFactory/factories/adfcdcs",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VIVID_Schema"
				},
				"SourceConnectionsInfo": [
					{
						"SourceEntities": [
							{
								"name": "VIVID.BLOB_CUSTOMER_RAW",
								"properties": {
									"schema": [
										{
											"name": "INDEX_NUM",
											"dataType": "integer"
										},
										{
											"name": "CUSTOMER_ID",
											"dataType": "string"
										},
										{
											"name": "FIRST_NAME",
											"dataType": "string"
										},
										{
											"name": "LAST_NAME",
											"dataType": "string"
										},
										{
											"name": "COMPANY",
											"dataType": "string"
										},
										{
											"name": "CITY",
											"dataType": "string"
										},
										{
											"name": "COUNTRY",
											"dataType": "string"
										},
										{
											"name": "PHONE_1",
											"dataType": "string"
										},
										{
											"name": "PHONE_2",
											"dataType": "string"
										},
										{
											"name": "EMAIL",
											"dataType": "string"
										},
										{
											"name": "SUBSCRIPTION_DATE",
											"dataType": "string"
										},
										{
											"name": "WEBSITE",
											"dataType": "string"
										}
									],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "VIVID"
										},
										{
											"name": "tableName",
											"value": "BLOB_CUSTOMER_RAW"
										},
										{
											"name": "enableNativeCdc",
											"value": true
										},
										{
											"name": "netChanges",
											"value": true
										},
										{
											"name": "allowSchemaDrift",
											"value": false
										},
										{
											"name": "inferDriftedColumnTypes",
											"value": false
										}
									]
								}
							}
						],
						"Connection": {
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "skipInitialLoad",
									"value": true
								}
							]
						}
					}
				],
				"TargetConnectionsInfo": [
					{
						"TargetEntities": [
							{
								"name": "VIVID.BLOB_CUSTOMER_RAW_CDC",
								"properties": {
									"schema": [
										{
											"name": "INDEX_NUM",
											"dataType": "integer"
										},
										{
											"name": "CUSTOMER_ID",
											"dataType": "string"
										},
										{
											"name": "FIRST_NAME",
											"dataType": "string"
										},
										{
											"name": "LAST_NAME",
											"dataType": "string"
										},
										{
											"name": "COMPANY",
											"dataType": "string"
										},
										{
											"name": "CITY",
											"dataType": "string"
										},
										{
											"name": "COUNTRY",
											"dataType": "string"
										},
										{
											"name": "PHONE_1",
											"dataType": "string"
										},
										{
											"name": "PHONE_2",
											"dataType": "string"
										},
										{
											"name": "EMAIL",
											"dataType": "string"
										},
										{
											"name": "SUBSCRIPTION_DATE",
											"dataType": "string"
										},
										{
											"name": "WEBSITE",
											"dataType": "string"
										}
									],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "VIVID"
										},
										{
											"name": "tableName",
											"value": "BLOB_CUSTOMER_RAW_CDC"
										},
										{
											"name": "allowSchemaDrift",
											"value": false
										},
										{
											"name": "inferDriftedColumnTypes",
											"value": false
										},
										{
											"name": "keys",
											"value": [
												"CITY",
												"COMPANY",
												"COUNTRY",
												"CUSTOMER_ID",
												"EMAIL",
												"FIRST_NAME",
												"INDEX_NUM",
												"LAST_NAME",
												"PHONE_1",
												"PHONE_2",
												"SUBSCRIPTION_DATE",
												"WEBSITE"
											]
										},
										{
											"name": "deletable",
											"value": true
										},
										{
											"name": "updateable",
											"value": true
										},
										{
											"name": "upsertable",
											"value": true
										},
										{
											"name": "defaultToUpsert",
											"value": true
										}
									]
								}
							},
							{
								"name": "VIVID.BLOB_CUSTOMER_RAW",
								"properties": {
									"schema": [
										{
											"name": "INDEX_NUM",
											"dataType": "integer"
										},
										{
											"name": "CUSTOMER_ID",
											"dataType": "string"
										},
										{
											"name": "FIRST_NAME",
											"dataType": "string"
										},
										{
											"name": "LAST_NAME",
											"dataType": "string"
										},
										{
											"name": "COMPANY",
											"dataType": "string"
										},
										{
											"name": "CITY",
											"dataType": "string"
										},
										{
											"name": "COUNTRY",
											"dataType": "string"
										},
										{
											"name": "PHONE_1",
											"dataType": "string"
										},
										{
											"name": "PHONE_2",
											"dataType": "string"
										},
										{
											"name": "EMAIL",
											"dataType": "string"
										},
										{
											"name": "SUBSCRIPTION_DATE",
											"dataType": "string"
										},
										{
											"name": "WEBSITE",
											"dataType": "string"
										}
									],
									"dslConnectorProperties": [
										{
											"name": "schemaName",
											"value": "VIVID"
										},
										{
											"name": "tableName",
											"value": "BLOB_CUSTOMER_RAW"
										},
										{
											"name": "allowSchemaDrift",
											"value": false
										},
										{
											"name": "inferDriftedColumnTypes",
											"value": false
										},
										{
											"name": "defaultToUpsert",
											"value": false
										}
									]
								}
							}
						],
						"Connection": {
							"linkedServiceType": "AzureSqlDatabase",
							"type": "linkedservicetype",
							"isInlineDataset": true,
							"commonDslConnectorProperties": [
								{
									"name": "allowSchemaDrift",
									"value": true
								},
								{
									"name": "inferDriftedColumnTypes",
									"value": true
								},
								{
									"name": "format",
									"value": "table"
								},
								{
									"name": "store",
									"value": "sqlserver"
								},
								{
									"name": "databaseType",
									"value": "databaseType"
								},
								{
									"name": "database",
									"value": "database"
								},
								{
									"name": "deletable",
									"value": false
								},
								{
									"name": "insertable",
									"value": true
								},
								{
									"name": "updateable",
									"value": false
								},
								{
									"name": "upsertable",
									"value": false
								},
								{
									"name": "skipDuplicateMapInputs",
									"value": true
								},
								{
									"name": "skipDuplicateMapOutputs",
									"value": true
								}
							]
						},
						"DataMapperMappings": [
							{
								"targetEntityName": "VIVID.BLOB_CUSTOMER_RAW_CDC",
								"sourceEntityName": "VIVID.BLOB_CUSTOMER_RAW",
								"sourceConnectionReference": {
									"connectionName": "LS_SB_Tgt_VIVID",
									"type": "linkedservicetype"
								},
								"attributeMappingInfo": {
									"attributeMappings": [
										{
											"name": "CITY",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "CITY",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "COMPANY",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "COMPANY",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "COUNTRY",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "COUNTRY",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "CUSTOMER_ID",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "CUSTOMER_ID",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "EMAIL",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "EMAIL",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "FIRST_NAME",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "FIRST_NAME",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "INDEX_NUM",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "INDEX_NUM",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "LAST_NAME",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "LAST_NAME",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "PHONE_1",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "PHONE_1",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "PHONE_2",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "PHONE_2",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "SUBSCRIPTION_DATE",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "SUBSCRIPTION_DATE",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										},
										{
											"name": "WEBSITE",
											"type": "Direct",
											"functionName": "",
											"attributeReference": {
												"name": "WEBSITE",
												"entity": "VIVID.BLOB_CUSTOMER_RAW",
												"entityConnectionReference": {
													"connectionName": "LS_SB_Tgt_VIVID",
													"type": "linkedservicetype"
												}
											}
										}
									]
								}
							}
						],
						"Relationships": []
					}
				],
				"Policy": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15
					},
					"mode": "Microbatch"
				},
				"allowVNetOverride": true,
				"id": "b07f4e3f84fe48afb35a2747534bf002"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_SQL_to_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_AzureSQL_ADLS_Snowflake",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AzureSQL_to_ADLS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DimCustomer": {},
									"AdlsDimCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ADLS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/dataflows/AzureSQL_to_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQL_to_ADLS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_DWH_DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "P_DimCustomer",
								"type": "DatasetReference"
							},
							"name": "AdlsDimCustomer"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_SID as integer,",
						"          INDEX_NUM as integer,",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          COMPANY as string,",
						"          CITY as string,",
						"          COUNTRY as string,",
						"          PHONE_1 as string,",
						"          PHONE_2 as string,",
						"          EMAIL as string,",
						"          SUBSCRIPTION_DATE as string,",
						"          WEBSITE as string,",
						"          SRC_ROW_INSRT_TSTMP as timestamp,",
						"          HASH_DIFF as binary,",
						"          WATERMARK_ID as integer,",
						"          BATCH_ID as integer,",
						"          ROW_EFF_DT as date,",
						"          ROW_EXPIR_DT as date,",
						"          ROW_STS_CD as string,",
						"          VERSION_NUM as integer,",
						"          INSERT_TSTMP_IST as timestamp,",
						"          LST_UPD_TSTMP_IST as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"DimCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AdlsDimCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DWH_DimCustomer')]",
				"[concat(variables('factoryId'), '/datasets/P_DimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DWH_DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CUSTOMER_SID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "INDEX_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "FIRST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "LAST_NAME",
						"type": "nvarchar"
					},
					{
						"name": "COMPANY",
						"type": "nvarchar"
					},
					{
						"name": "CITY",
						"type": "nvarchar"
					},
					{
						"name": "COUNTRY",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_1",
						"type": "nvarchar"
					},
					{
						"name": "PHONE_2",
						"type": "nvarchar"
					},
					{
						"name": "EMAIL",
						"type": "nvarchar"
					},
					{
						"name": "SUBSCRIPTION_DATE",
						"type": "nvarchar"
					},
					{
						"name": "WEBSITE",
						"type": "nvarchar"
					},
					{
						"name": "SRC_ROW_INSRT_TSTMP",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "HASH_DIFF",
						"type": "varbinary"
					},
					{
						"name": "WATERMARK_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BATCH_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ROW_EFF_DT",
						"type": "date"
					},
					{
						"name": "ROW_EXPIR_DT",
						"type": "date"
					},
					{
						"name": "ROW_STS_CD",
						"type": "nvarchar"
					},
					{
						"name": "VERSION_NUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "INSERT_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LST_UPD_TSTMP_IST",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "DWH",
					"table": "DIM_CUSTOMER_DETAILS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SB_Lkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Par_ETLSANDBOX')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Par_ETLSANDBOX_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Par_ETLSANDBOX_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P_DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Par_ETLSANDBOX",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ADLS_DimCustomer.parquet",
						"fileSystem": "akum-adls-input"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Par_ETLSANDBOX')]"
			]
		}
	]
}