{
	"name": "P_SCD_T2_Vivid_Schema_People",
	"properties": {
		"activities": [
			{
				"name": "SetStartTime",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "StartTime",
					"value": {
						"value": "@formatDateTime(convertFromUtc(utcNow(), 'India Standard Time'), 'yyyy-MM-dd HH:mm:ss.fffffff')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetWatermarkValue",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetStartTime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat(\n  'SELECT WATERMARK_VALUE,WATERMARK_ID FROM dbo.WATERMARK_TRACKER ',\n  'WHERE SOURCE_TABLE_NAME = ''', pipeline().parameters.p_src_table_name, ''' ',\n  'AND PIPELINE_NAME = ''', pipeline().Pipeline, ''' ',\n  'AND ROW_STS_CD = ''A'''\n)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_Watermark_Tracker",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "SetPreviousWatermark",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "GetWatermarkValue",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "PreviousWatermark",
					"value": {
						"value": "@if(\n  or(empty(activity('GetWatermarkValue').output.firstRow), empty(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE)),\n  '',\n  formatDateTime(activity('GetWatermarkValue').output.firstRow.WATERMARK_VALUE, 'yyyy-MM-dd HH:mm:ss.fffffff')\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "IsFirstRun",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "SetPreviousWatermark",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(variables('PreviousWatermark'))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "SqlQuery_After_1_run",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "SqlQuery",
								"value": {
									"value": "@concat(\n  'SELECT ',\n  'INDEX_NUM,USR_ID,FIRST_NAME,LAST_NAME,SEX,EMAIL,PHONE,DATE_OF_BIRTH, ',\n  'JOB_TITLE,SRC_ROW_INSRT_TSTMP ',\n  'HASHBYTES(''SHA2_256'', ',\n    'CONCAT_WS(''|'', ',\n    'ISNULL(FIRST_NAME,'''') , ',\n    'ISNULL(LAST_NAME,'''') , ',\n    'ISNULL(SEX,'''') , ',\n    'ISNULL(DATE_OF_BIRTH,'''') , ',\n    'ISNULL(JOB_TITLE,'''') , ',\n    'ISNULL(PHONE,'''') , ',\n    'ISNULL(EMAIL,'''') , ',\n  ')) AS HASH_DIFF ',\n  'FROM ', pipeline().parameters.p_src_schema_name, '.', pipeline().parameters.p_src_table_name, ' ',\n  'WHERE SRC_ROW_INSRT_TSTMP > CAST(''', \n    formatDateTime(variables('PreviousWatermark'), 'yyyy-MM-dd HH:mm:ss'),\n  ''' AS DATETIME2)'\n)",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "SqlQuery_1_run",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "SqlQuery",
								"value": {
									"value": "@concat(\n  'SELECT ',\n  'INDEX_NUM,USR_ID,FIRST_NAME,LAST_NAME,SEX,EMAIL,PHONE,DATE_OF_BIRTH, ',\n  'JOB_TITLE,SRC_ROW_INSRT_TSTMP ',\n  'HASHBYTES(''SHA2_256'', ',\n  'CONCAT_WS(''|'', ',\n    'ISNULL(FIRST_NAME,'''') , ',\n    'ISNULL(LAST_NAME,'''') , ',\n    'ISNULL(SEX,'''') , ',\n    'ISNULL(DATE_OF_BIRTH,'''') , ',\n    'ISNULL(JOB_TITLE,'''') , ',\n    'ISNULL(PHONE,'''') , ',\n    'ISNULL(EMAIL,'''') , ',\n  ')) AS HASH_DIFF ',\n  'FROM ', pipeline().parameters.p_src_schema_name, '.', pipeline().parameters.p_src_table_name\n)\n",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "TruncStageTable",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "IsFirstRun",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "LS_Azure_SB_Lkp",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat(\n  'TRUNCATE TABLE [',\n  pipeline().parameters.p_stg_schema_name, '].[', \n  pipeline().parameters.p_stg_table_name, '];'\n)",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "LoadStage_WithHash",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "TruncStageTable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@variables('SqlQuery')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_People_Raw_0209",
						"type": "DatasetReference",
						"parameters": {
							"Src_Schema_Name": {
								"value": "@pipeline().parameters.p_src_schema_name",
								"type": "Expression"
							},
							"Src_Table_Name": {
								"value": "@pipeline().parameters.p_src_table_name",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_STG_PEOPLE_0209",
						"type": "DatasetReference",
						"parameters": {
							"Stg_Schema_Name": {
								"value": "@pipeline().parameters.p_stg_schema_name",
								"type": "Expression"
							},
							"Stg_Table_Name": {
								"value": "@pipeline().parameters.p_stg_table_name",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"p_src_schema_name": {
				"type": "string",
				"defaultValue": "VIVID"
			},
			"p_src_table_name": {
				"type": "string",
				"defaultValue": "BLOB_PEOPLE_RAW"
			},
			"p_stg_schema_name": {
				"type": "string",
				"defaultValue": "DWH"
			},
			"p_stg_table_name": {
				"type": "string",
				"defaultValue": "STG_PEOPLE_DETAILS"
			},
			"p_dim_schema_name": {
				"type": "string",
				"defaultValue": "DWH"
			},
			"p_dim_table_name": {
				"type": "string",
				"defaultValue": "DIM_PEOPLE_DETAILS"
			},
			"p_file_table_id": {
				"type": "int",
				"defaultValue": 1002
			},
			"p_batch_id": {
				"type": "int",
				"defaultValue": 12001
			}
		},
		"variables": {
			"StartTime": {
				"type": "String"
			},
			"PreviousWatermark": {
				"type": "String"
			},
			"RowsInserted": {
				"type": "String",
				"defaultValue": "0"
			},
			"RowsExpired": {
				"type": "String",
				"defaultValue": "0"
			},
			"RowsDeleted": {
				"type": "String",
				"defaultValue": "0"
			},
			"SqlQuery": {
				"type": "String"
			},
			"MaxWatermark": {
				"type": "String"
			}
		},
		"folder": {
			"name": "SCDs"
		},
		"annotations": []
	}
}