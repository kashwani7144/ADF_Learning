{
	"name": "DF_SourceKeys_Full",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_VIVID_RAW_TABLES",
						"type": "DatasetReference"
					},
					"name": "VividRawTables"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_VIVID_RAW_TABLES",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          INDEX_NUM as integer,",
				"          CUSTOMER_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          COMPANY as string,",
				"          CITY as string,",
				"          COUNTRY as string,",
				"          PHONE_1 as string,",
				"          PHONE_2 as string,",
				"          EMAIL as string,",
				"          SUBSCRIPTION_DATE as string,",
				"          WEBSITE as string,",
				"          SRC_ROW_INSRT_TSTMP as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> VividRawTables",
				"VividRawTables sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INDEX_NUM as integer,",
				"          CUSTOMER_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          COMPANY as string,",
				"          CITY as string,",
				"          COUNTRY as string,",
				"          PHONE_1 as string,",
				"          PHONE_2 as string,",
				"          EMAIL as string,",
				"          SUBSCRIPTION_DATE as string,",
				"          WEBSITE as string,",
				"          SRC_ROW_INSRT_TSTMP as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}